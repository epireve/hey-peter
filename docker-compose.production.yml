version: '3.8'

services:
  # Production Application (Multiple Replicas)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3000-3002:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      DATABASE_URL: ${DATABASE_URL}
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      DATADOG_API_KEY: ${DATADOG_API_KEY}
      RATE_LIMIT_MAX: 50
      CACHE_TTL: 3600
    volumes:
      - ./public:/app/public:ro
    networks:
      - heypeter-production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first

  # Redis Cluster for Production
  redis-master:
    image: redis:7-alpine
    container_name: heypeter-redis-master
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - heypeter-redis-master-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - heypeter-production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  redis-replica:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_MASTER_HOST: redis-master
    volumes:
      - heypeter-redis-replica-data:/data
    networks:
      - heypeter-production-network
    depends_on:
      - redis-master
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Load Balancer with SSL Termination
  nginx:
    image: nginx:alpine
    container_name: heypeter-nginx-production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - heypeter-production-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: heypeter-prometheus-production
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - heypeter-prometheus-production-data:/prometheus
    networks:
      - heypeter-production-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: heypeter-grafana-production
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - heypeter-grafana-production-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - heypeter-production-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # AlertManager for Alert Handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: heypeter-alertmanager-production
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - heypeter-alertmanager-production-data:/alertmanager
    networks:
      - heypeter-production-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Log Aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: heypeter-elasticsearch-production
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      xpack.security.enabled: false
    volumes:
      - heypeter-elasticsearch-production-data:/usr/share/elasticsearch/data
    networks:
      - heypeter-production-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: heypeter-logstash-production
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - heypeter-production-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: heypeter-kibana-production
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - heypeter-production-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: heypeter-backup-production
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - heypeter-backup-production-data:/backups
    networks:
      - heypeter-production-network
    restart: unless-stopped
    command: >
      sh -c "
        crontab -l | { cat; echo '0 2 * * * /backup.sh'; } | crontab -
        && crond -f
      "

volumes:
  heypeter-redis-master-data:
  heypeter-redis-replica-data:
  heypeter-prometheus-production-data:
  heypeter-grafana-production-data:
  heypeter-alertmanager-production-data:
  heypeter-elasticsearch-production-data:
  heypeter-backup-production-data:

networks:
  heypeter-production-network:
    driver: bridge
    name: heypeter-production-network