# HeyPeter Academy Management System
## Product Requirements Document (PRD)

**Version:** 2.0
**Date:** June 17, 2025  
**Prepared by:** Firdaus A
**Document Type:** Product Requirements Document  

---

## Table of Contents

1. [Executive Summary](#1-executive-summary)
2. [Product Vision and Goals](#2-product-vision-and-goals)
3. [Target Users and Personas](#3-target-users-and-personas)
4. [Core Features by Module](#4-core-features-by-module)
5. [Technical Requirements](#5-technical-requirements)
6. [User Stories for Key Workflows](#6-user-stories-for-key-workflows)
7. [Success Metrics and KPIs](#7-success-metrics-and-kpis)
8. [Implementation Phases and Roadmap](#8-implementation-phases-and-roadmap)
9. [Dependencies and Risks](#9-dependencies-and-risks)

---

## 1. Executive Summary

### 1.1 Project Overview

The HeyPeter Academy Management System is a lean, web-based platform designed to streamline operations for an English language learning academy. The system addresses the complex needs of managing student enrollments, teacher scheduling, class coordination, and progress tracking in a multi-format educational environment (online, offline, group classes, and 1-on-1 sessions).

### 1.2 Business Problem

HeyPeter Academy currently faces operational challenges in:
- Manual student information management and progress tracking
- Complex scheduling coordination between teachers and students
- Inefficient communication channels for class updates and notifications
- Limited visibility into student progress and teacher performance
- Time-consuming administrative tasks for leave management and makeup classes
- Fragmented systems for different course types (group vs. individual classes)

### 1.3 Proposed Solution (Lean Approach)

A unified web-based management system that provides:
- Centralized student information management with automated progress tracking
- Algorithmic scheduling system for optimal class assignments (no AI/ML initially)
- Integrated booking system for 1-on-1 sessions
- Real-time notifications via email (Mailgun) and future WhatsApp integration
- Comprehensive analytics and reporting capabilities
- Multi-role portals (admin, teacher, student) with role-specific features
- Admin-controlled user registration (no public signup)

### 1.4 Expected Outcomes

- 70% reduction in administrative overhead
- 90% automation of scheduling processes
- Improved student satisfaction through better class management
- Enhanced teacher productivity with streamlined workflows
- Data-driven insights for business optimization

---

## 2. Product Vision and Goals

### 2.1 Product Vision

"To create a lean, efficient academy management platform that empowers educators to focus on teaching while providing students with seamless learning experiences through intelligent automation and data-driven insights."

### 2.2 Primary Goals

**Operational Excellence:**
- Automate 90% of administrative tasks related to scheduling and student management
- Reduce class scheduling conflicts by 95% using algorithmic optimization
- Implement real-time progress tracking for all course types

**User Experience:**
- Provide role-specific portals with intuitive interfaces
- Enable self-service capabilities for students and teachers
- Deliver timely notifications via email with future WhatsApp integration

**Business Intelligence:**
- Generate actionable insights through comprehensive analytics
- Support data-driven decision making for curriculum and resource planning
- Track key performance indicators for continuous improvement

**Scalability:**
- Support academy growth from current capacity to 3x student enrollment
- Enable addition of new course types and teaching formats
- Provide flexible configuration for business rule adjustments
- Prepare backend architecture for future mobile app development

### 2.3 Success Criteria

- System adoption rate of 95% among all user groups within 3 months
- 50% reduction in manual scheduling time
- 30% improvement in student satisfaction scores
- 25% increase in teacher productivity metrics
- 100% accurate hour tracking and billing

---

## 3. Target Users and Personas

### 3.1 Primary Users

**Academy Administrators**
- *Role:* System administrators, academic coordinators, operations managers
- *Goals:* Efficient academy operations, data visibility, resource optimization, user account management
- *Pain Points:* Manual processes, scattered information, reporting challenges, user registration management
- *Tech Savviness:* Moderate to High
- *Special Access:* Only role that can create new teacher and student accounts

**Teachers/Instructors**
- *Role:* English language instructors, coaches
- *Goals:* Clear schedules, student progress visibility, fair compensation tracking, student account creation
- *Pain Points:* Schedule conflicts, communication gaps, manual attendance tracking
- *Tech Savviness:* Low to Moderate
- *Special Access:* Can create student accounts for their classes

**Students**
- *Role:* English language learners of various levels
- *Goals:* Clear progress tracking, easy class booking, schedule flexibility
- *Pain Points:* Confusing schedules, difficult leave requests, lack of progress visibility
- *Tech Savviness:* Low to Moderate
- *Access:* Login-only access, no self-registration

### 3.2 Detailed Personas

**Persona 1: Sarah Chen - Academy Administrator**
- *Age:* 32, Operations Manager
- *Experience:* 5 years in educational administration
- *Goals:* Streamline operations, improve student retention, generate accurate reports, manage all user accounts
- *Frustrations:* Spending 60% of time on manual scheduling and data entry
- *Tech Comfort:* High - comfortable with multiple systems and data analysis

**Persona 2: Mark Thompson - English Teacher**
- *Age:* 28, Full-time English instructor
- *Experience:* 3 years teaching, handles both group and 1-on-1 classes
- *Goals:* Clear teaching schedule, fair compensation, student progress insights, easy student onboarding
- *Frustrations:* Last-minute schedule changes, unclear student backgrounds
- *Tech Comfort:* Moderate - uses basic software but prefers simple interfaces

**Persona 3: Lisa Wang - Student**
- *Age:* 25, Working professional taking Business English
- *Experience:* 6 months at academy, attends both group and 1-on-1 classes
- *Goals:* Flexible scheduling, clear progress tracking, easy leave management
- *Frustrations:* Complicated booking process, unclear remaining hours
- *Tech Comfort:* Moderate - comfortable with mobile apps and web platforms

---

## 4. Core Features by Module

### 4.1 Student Management Module

#### 4.1.1 Student Information Management
**Core Functionality:**
- Complete student profile creation and maintenance (admin/teacher initiated)
- Auto-generated unique Student ID system
- Internal coding system (Coach Code + Student Number)
- Photo upload and profile image management
- Multi-level categorization (Test Level, Course Type, Format)
- No self-registration - accounts created by admin or teachers only

**Data Fields:**
- Personal Information: Full Name, Gender, Photo
- Academic Information: Test Level (Basic, Everyday A/B, Speak Up, Business English, 1-on-1)
- Course Details: Enrolled Courses (Online/Offline), Total Hours, Start Date
- Commercial Information: Payment Date, Amount, Discount, Sales Representative
- Administrative: Lead Source, Material Purchase Status

#### 4.1.2 Progress Tracking System
**Features:**
- Visual progress indicators (completed lessons in gray, unattended in red)
- Material distribution tracking for physical and digital resources
- Course completion percentage calculation
- Learning path visualization
- Performance analytics and trend analysis

#### 4.1.3 Hour Management System
**Capabilities:**
- Real-time hour balance tracking
- Automated hour deduction based on attendance rules:
  - Attended classes: Full deduction by class duration
  - Leave >48hrs notice: Class postponement without deduction
  - Leave â‰¤48hrs: One postponement chance, then deduction
  - No-show: Full hour deduction
- Hour usage analytics and projections
- Low balance alerts and notifications via email

#### 4.1.4 Leave Management System
**Features:**
- Student-initiated leave request submission
- Configurable advance notice requirements
- Automated approval workflows based on business rules
- Auto-suggestion of makeup class options
- Integration with scheduling system for seamless rescheduling

### 4.2 Teacher Management Module

#### 4.2.1 Availability Management
**Functionality:**
- Weekly availability schedule definition
- Time slot configuration (e.g., Mon/Wed/Fri 9:30-12:30)
- Temporary availability adjustments
- Holiday and leave period blocking
- Integration with scheduling algorithm

#### 4.2.2 Schedule Management
**Features:**
- Auto-generated weekly timetables
- Drag-and-drop schedule editing interface
- Real-time schedule updates and conflict detection
- Class details display (time, topic, students, duration)
- Export capabilities (Excel, PDF) with printing options

#### 4.2.3 Performance Analytics
**Metrics Tracking:**
- Total teaching hours (daily, weekly, monthly filters)
- Student feedback aggregation and analysis
- Class attendance rates by teacher
- Average class hour consumption patterns
- Performance trend analysis

#### 4.2.4 Compensation Management
**Capabilities:**
- Real-time income tracking (weekly/monthly)
- Salary status monitoring (settled/unsettled)
- Bonus calculation and display
- Compensation rule transparency
- Payment history and documentation

### 4.3 Smart Scheduling System (Algorithmic Approach)

#### 4.3.1 Rule-Based Class Assignment
**Core Algorithm Features:**
- Content-based scheduling using unlearned material tracking
- Class size optimization (maximum 9 students per class)
- Duplicate lesson prevention across student schedules
- Content synchronization for group classes
- Multi-constraint optimization (student availability, teacher availability, room capacity)
- Pure algorithmic approach without AI/ML complexity

#### 4.3.2 Conflict Resolution
**Automated Features:**
- Alternative class recommendations when primary options are full
- Teacher substitution suggestions for schedule conflicts
- Manual override capabilities with system recommendations
- Real-time schedule validation and conflict detection

#### 4.3.3 Data Integration
**System Capabilities:**
- Daily-updated participation tracking tables
- Absence pattern analysis
- Pending attendance reconciliation
- Dynamic planning adjustments based on real-time data

### 4.4 1-on-1 Booking System

#### 4.4.1 Student Booking Interface
**Features:**
- Available teacher browsing with profiles and ratings
- Time slot selection within teacher availability windows
- Duration selection (30, 60, 90 minute options)
- Learning goal submission for session preparation
- Booking confirmation with email notifications

#### 4.4.2 Smart Matching Algorithm
**Capabilities:**
- Time-based teacher suggestions (student enters desired time)
- Teacher-first selection (view specific teacher's availability)
- Automatic alternative recommendations for conflicts
- Skill-level matching for optimal teacher-student pairing
- Simple algorithmic matching without AI complexity

#### 4.4.3 Session Management
**Functionality:**
- Booking confirmation notifications via email
- Pre-session reminders (5-10 minutes before) via email
- Session cancellation and rescheduling
- Post-session feedback collection
- Session history and analytics
- Future: Click-to-WhatsApp for quick teacher-student communication

### 4.5 Communication and Notification System

#### 4.5.1 Email Notifications (via Mailgun)
**Delivery Capabilities:**
- Transactional emails for system events
- Email blast for announcements
- Automated notifications and reminders
- Template-based email system

**Notification Types:**
- Class schedule changes and updates
- Hour balance warnings (customizable thresholds)
- Booking confirmations and cancellations
- Weekly schedule generation and distribution
- Leave request status updates
- Administrative reminders

#### 4.5.2 Future WhatsApp Integration
**Planned Features:**
- Click-to-WhatsApp buttons for teachers
- Pre-formatted message templates
- Quick communication between teachers and students
- One-click messaging with context

#### 4.5.3 Automated Communication Workflows
**Features:**
- Weekly schedule auto-generation and email distribution
- Pre-class reminder automation
- Post-class feedback request automation
- Absence follow-up communication
- Hour depletion warning sequences

### 4.6 Analytics and Reporting Module

#### 4.6.1 Student Analytics
**Metrics:**
- Attendance patterns and trends
- Hour usage efficiency and projections
- Progress tracking across all course types
- Performance correlation analysis
- Retention and satisfaction metrics

#### 4.6.2 Teacher Analytics
**Performance Metrics:**
- Teaching load distribution and balance
- Student feedback aggregation
- Class attendance rates by teacher
- Income and compensation analytics
- Professional development tracking

#### 4.6.3 Business Intelligence
**Operational Metrics:**
- Resource utilization optimization
- Revenue tracking and projections
- Student acquisition and retention analysis
- Course popularity and effectiveness metrics
- Operational efficiency indicators

#### 4.6.4 Data Export and Visualization
**Capabilities:**
- Customizable dashboard creation
- Automated report generation (daily, weekly, monthly)
- Export functionality (Excel, PDF, CSV)
- Interactive data visualization tools
- Historical trend analysis and forecasting

### 4.7 Additional Features

#### 4.7.1 Authentication and Access Control
**Security Features:**
- Secure login system (no public registration)
- Admin-only teacher account creation
- Teacher-initiated student account creation
- Role-based access control
- Session management and timeout
- Password reset via email

#### 4.7.2 Course Evaluation System
**Multi-Perspective Feedback:**
- Student post-class rating and comment system
- Teacher performance notes and student progress documentation
- Administrative curriculum effectiveness analysis
- Feedback aggregation and trend analysis

---

## 5. Technical Requirements

### 5.1 High-Level Architecture

#### 5.1.1 Technology Stack (Lean Approach)

**Frontend:**
- Next.js 14+ with TypeScript
- Shadcn UI component library
- Tailwind CSS for styling
- React Hook Form for form management
- TanStack Query for data fetching
- Zustand for state management

**Backend:**
- Next.js API Routes
- Supabase for:
  - PostgreSQL database
  - Authentication
  - Real-time subscriptions
  - Row Level Security (RLS)
  - Storage for file uploads

**Hosting & Infrastructure:**
- Vercel for hosting (optimized for Next.js)
- Vercel Edge Functions for serverless computing
- Vercel Analytics for performance monitoring
- Supabase Cloud for database and backend services

**Email Service:**
- Mailgun for:
  - Transactional emails
  - Email blasts
  - Email templates
  - Delivery tracking

#### 5.1.2 Architecture Pattern

**Monolithic Next.js Application:**
- Server-side rendering (SSR) for SEO and performance
- API routes for backend logic
- Incremental Static Regeneration (ISR) where applicable
- Edge runtime for optimal performance
- Mobile-ready architecture for future native app development

#### 5.1.3 Database Schema Design

**Core Tables (Supabase/PostgreSQL):**
- users (with role-based access)
- students
- teachers
- courses
- classes
- schedules
- bookings
- attendance
- leave_requests
- materials
- notifications
- feedback
- analytics_events

### 5.2 Performance Requirements

#### 5.2.1 Scalability Specifications
- Support for 1,000+ concurrent users
- Response time <2 seconds for standard operations
- 99.9% uptime availability
- Vercel's automatic scaling
- Supabase connection pooling

#### 5.2.2 Data Management
- Real-time data synchronization via Supabase subscriptions
- Automated daily backups via Supabase
- Data retention policy: 7 years for academic records
- ACID compliance via PostgreSQL
- Row Level Security for data protection

### 5.3 Security Requirements

#### 5.3.1 Authentication & Authorization
- Supabase Auth for user management
- JWT-based authentication
- Role-based access control (Admin, Teacher, Student)
- No public registration endpoints
- Secure password policies

#### 5.3.2 Data Protection
- SSL/TLS encryption (provided by Vercel)
- Encryption at rest (Supabase)
- GDPR compliance considerations
- Regular security updates
- API rate limiting

### 5.4 Mobile Readiness

#### 5.4.1 Responsive Design
- Mobile-first responsive design
- PWA capabilities for app-like experience
- Offline support for critical features
- Touch-optimized interfaces

#### 5.4.2 Future Mobile Development
- API-first architecture ready for mobile apps
- RESTful API design
- Standardized data formats (JSON)
- Authentication system compatible with mobile SDKs

---

## 6. User Stories for Key Workflows

### 6.1 Student Management Workflows

#### Story 1: Admin Creates Teacher Account
**As an** Academy Administrator  
**I want to** create new teacher accounts  
**So that** I can control who has access to the system and maintain security  

**Acceptance Criteria:**
- Admin can access teacher creation form
- Required fields: name, email, initial password, coach code
- System generates unique teacher ID
- Email sent to teacher with login credentials
- Teacher appears in teacher management list

**Technical Requirements:**
- Supabase Auth integration for user creation
- Mailgun integration for credential delivery
- Role assignment in database
- Form validation and error handling

#### Story 2: Teacher Creates Student Account
**As a** Teacher  
**I want to** create student accounts for my classes  
**So that** students can access the system without public registration  

**Acceptance Criteria:**
- Teacher can access student creation form
- Auto-assignment of teacher's coach code to student internal code
- Required student information captured
- Login credentials generated and provided
- Student automatically associated with teacher

**Technical Requirements:**
- Teacher-scoped student creation permissions
- Automatic internal code generation
- Relationship mapping in database
- Batch student creation capability

### 6.2 Scheduling Workflows

#### Story 3: Algorithmic Class Scheduling
**As an** Academy Administrator  
**I want to** have classes automatically scheduled using smart algorithms  
**So that** I can optimize learning outcomes while minimizing conflicts  

**Acceptance Criteria:**
- Schedule generation based on unlearned content tracking
- Class size limits enforced (max 9 students)
- No duplicate lessons for individual students
- Content synchronization across class participants
- Manual adjustment capability preserved

**Technical Requirements:**
- Constraint-based scheduling algorithm
- Real-time conflict detection
- Database queries for optimization
- Schedule preview before confirmation
- Rollback capability for changes

### 6.3 Communication Workflows

#### Story 4: Email Notification System
**As a** Student/Teacher  
**I want to** receive timely email notifications  
**So that** I stay informed about schedule changes and important updates  

**Acceptance Criteria:**
- Email notifications for all critical events
- Customizable notification preferences
- Email templates for consistency
- Delivery tracking and retry logic
- Unsubscribe options for non-critical emails

**Technical Requirements:**
- Mailgun API integration
- Email template management
- Queue system for email delivery
- Delivery status tracking
- User preference storage

#### Story 5: Future WhatsApp Integration
**As a** Teacher  
**I want to** send quick WhatsApp messages to students  
**So that** I can communicate efficiently for urgent matters  

**Acceptance Criteria:**
- Click-to-WhatsApp buttons in student profiles
- Pre-filled message templates
- Student phone number validation
- Message context included (class, time, etc.)

**Technical Requirements:**
- WhatsApp Web URL generation
- Message template system
- Phone number formatting
- Context data injection

---

## 7. Success Metrics and KPIs

### 7.1 Operational Efficiency Metrics

#### 7.1.1 Administrative Efficiency
**Primary KPIs:**
- Administrative time reduction: Target 70% decrease in manual scheduling time
- Schedule generation speed: Target <1 minute for weekly schedules
- Data entry efficiency: Target 80% reduction in duplicate data entry
- Error rate reduction: Target 95% decrease in scheduling conflicts

#### 7.1.2 System Performance Metrics
**Technical KPIs:**
- System uptime: Target 99.9% availability (Vercel SLA)
- Response time: Target <2 seconds for standard operations
- User adoption rate: Target 95% within 3 months
- Data accuracy: Target 99.5% accuracy in hour tracking

### 7.2 User Experience Metrics

#### 7.2.1 Student Satisfaction
**Primary KPIs:**
- Student portal usage: Target 90% active monthly users
- Leave request efficiency: Target 95% automated approvals
- Schedule clarity: Target 95% student satisfaction
- Booking success rate: Target 98% successful 1-on-1 bookings

#### 7.2.2 Teacher Satisfaction
**Primary KPIs:**
- Schedule satisfaction: Target 90% teacher satisfaction
- Student creation efficiency: Target <2 minutes per student
- Schedule change frequency: Target <5% weekly modifications
- Tool adoption: Target 100% teacher portal usage within 4 weeks

### 7.3 Business Impact Metrics

#### 7.3.1 Growth and Efficiency
**Primary KPIs:**
- Student capacity: Support 3x growth without performance degradation
- Operational cost: 50% reduction in administrative overhead
- System reliability: 99.9% uptime achievement
- Feature utilization: 80% of features actively used

---

## 8. Implementation Phases and Roadmap

### 8.1 Phase 1: Foundation (Weeks 1-6)

#### Sprint 1-2: Setup and Authentication (Weeks 1-3)
**Deliverables:**
- Next.js project setup with TypeScript
- Supabase project configuration
- Authentication system (admin-only registration)
- Basic UI components with Shadcn
- Deployment pipeline on Vercel

#### Sprint 3-4: User Management (Weeks 4-6)
**Deliverables:**
- Admin portal for teacher account creation
- Teacher portal for student account creation
- User profile management
- Role-based access control
- Email integration with Mailgun

### 8.2 Phase 2: Core Features (Weeks 7-16)

#### Sprint 5-6: Student Management (Weeks 7-9)
**Deliverables:**
- Complete student information system
- Progress tracking implementation
- Hour management system
- Material distribution tracking

#### Sprint 7-8: Teacher Management (Weeks 10-12)
**Deliverables:**
- Teacher availability management
- Schedule viewing and editing
- Compensation tracking
- Performance analytics

#### Sprint 9-10: Scheduling System (Weeks 13-16)
**Deliverables:**
- Algorithmic scheduling engine
- Conflict detection and resolution
- Manual adjustment interface
- Schedule distribution system

### 8.3 Phase 3: Advanced Features (Weeks 17-24)

#### Sprint 11-12: Booking System (Weeks 17-19)
**Deliverables:**
- 1-on-1 booking interface
- Teacher-student matching algorithm
- Booking management system
- Email notifications for bookings

#### Sprint 13-14: Analytics and Reporting (Weeks 20-22)
**Deliverables:**
- Analytics dashboard
- Report generation
- Data export functionality
- Performance metrics tracking

#### Sprint 15-16: Polish and Optimization (Weeks 23-24)
**Deliverables:**
- UI/UX improvements
- Performance optimization
- Bug fixes and refinements
- Documentation completion

### 8.4 Future Phases (Post-Launch)

**Phase 4: Enhanced Communication (Months 7-8)**
- WhatsApp integration
- Advanced notification preferences
- Communication analytics

**Phase 5: Mobile Development (Months 9-12)**
- React Native mobile app
- API optimization for mobile
- Offline capabilities
- Push notifications

**Phase 6: Advanced Features (Year 2)**
- Google Calendar integration
- Payment processing integration
- Video conferencing integration
- AI/ML scheduling optimization

---

## 9. Dependencies and Risks

### 9.1 Technical Dependencies

#### 9.1.1 External Service Dependencies
**Supabase:**
- Dependency: Database, Auth, Storage, Real-time
- Risk Level: Low
- Impact: Critical for all functionality
- Mitigation: Supabase has high reliability, backup export procedures

**Vercel:**
- Dependency: Hosting, Edge Functions, Analytics
- Risk Level: Low
- Impact: Critical for application availability
- Mitigation: High uptime SLA, easy migration if needed

**Mailgun:**
- Dependency: Email delivery
- Risk Level: Low
- Impact: High for communications
- Mitigation: Fallback email provider configuration possible

### 9.2 Business Dependencies

#### 9.2.1 Stakeholder Dependencies
**User Adoption:**
- Risk: Resistance to new system
- Probability: Medium (40%)
- Impact: High
- Mitigation: Comprehensive training, gradual rollout, user feedback integration

**Data Migration:**
- Risk: Existing data quality issues
- Probability: High (70%)
- Impact: Medium
- Mitigation: Data audit, cleaning procedures, manual verification

### 9.3 Technical Risks

#### 9.3.1 Performance at Scale
**Risk:** System may slow down with increased users
**Mitigation:** 
- Vercel's automatic scaling
- Database query optimization
- Caching strategies
- Performance monitoring from day 1

#### 9.3.2 Scheduling Algorithm Complexity
**Risk:** Algorithm may not handle all edge cases
**Mitigation:**
- Start with simple rules
- Iterative improvements
- Manual override capabilities
- Comprehensive testing

### 9.4 Risk Monitoring

**Weekly Reviews:**
- Development progress tracking
- Performance metrics monitoring
- User feedback collection

**Monthly Reviews:**
- Stakeholder satisfaction assessment
- Budget and timeline evaluation
- Risk mitigation effectiveness

---

## Conclusion

The HeyPeter Academy Management System (Lean Edition) provides a focused, efficient solution for academy operations using modern, proven technologies. By leveraging Next.js, Supabase, and Vercel, we can deliver a robust system quickly while maintaining flexibility for future enhancements.

**Key Advantages of Lean Approach:**
- Faster time to market (6 months vs. 12 months)
- Lower initial investment
- Proven technology stack
- Easy maintenance and updates
- Ready for future mobile development
- Scalable architecture

**Next Steps:**
1. Stakeholder approval of lean approach
2. Development environment setup
3. Team onboarding on Next.js/Supabase
4. Sprint 1 kickoff

---

**Document Control:**
- **Version:** 2.0 (Lean Edition)
- **Last Updated:** June 17, 2025
- **Review Schedule:** Bi-weekly during development
- **Approval Required:** Academy Leadership, Technical Lead
- **Distribution:** Development Team, Academy Staff