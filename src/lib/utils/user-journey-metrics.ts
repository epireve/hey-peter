import { logger } from '@/lib/services';
/**
 * Custom Performance Metrics for Key User Journeys
 * 
 * Defines specific performance metrics and tracking for critical user journeys
 * in the HeyPeter Academy LMS system.
 */

import { enhancedPerformanceMonitor, type UserJourneyType } from './enhanced-performance-monitor';

// =====================================================================================
// JOURNEY-SPECIFIC METRICS
// =====================================================================================

export interface JourneyMetrics {
  journeyType: UserJourneyType;
  targetDuration: number; // Target completion time in ms
  criticalPath: string[]; // Key steps that must be optimized
  abandonmentThreshold: number; // Time after which abandonment is likely
  conversionGoals: {
    primary: string; // Main conversion event
    secondary?: string[]; // Additional conversion events
  };
  performanceWeight: number; // Impact weight (0-1) for overall score
}

export interface JourneyStep {
  name: string;
  description: string;
  targetDuration: number; // Expected step duration in ms
  critical: boolean; // Whether this step is on the critical path
  dependencies?: string[]; // Other steps this depends on
  metrics: {
    loadTime?: number;
    interactionDelay?: number;
    errorRate?: number;
    completionRate?: number;
  };
}

export interface StudentRegistrationMetrics extends JourneyMetrics {
  journeyType: 'student_registration';
  steps: {\n    landing: JourneyStep;\n    formStart: JourneyStep;\n    personalInfo: JourneyStep;\n    courseSelection: JourneyStep;\n    paymentInfo: JourneyStep;\n    verification: JourneyStep;\n    completion: JourneyStep;\n  };\n}\n\nexport interface ClassBookingMetrics extends JourneyMetrics {\n  journeyType: 'class_booking';\n  steps: {\n    discovery: JourneyStep;\n    selection: JourneyStep;\n    timeSlotChoice: JourneyStep;\n    teacherSelection: JourneyStep;\n    confirmation: JourneyStep;\n    payment: JourneyStep;\n    booking: JourneyStep;\n  };\n}\n\nexport interface LoginMetrics extends JourneyMetrics {\n  journeyType: 'login';\n  steps: {\n    landing: JourneyStep;\n    credentialEntry: JourneyStep;\n    authentication: JourneyStep;\n    redirection: JourneyStep;\n  };\n}\n\nexport interface PaymentFlowMetrics extends JourneyMetrics {\n  journeyType: 'payment_flow';\n  steps: {\n    initiation: JourneyStep;\n    methodSelection: JourneyStep;\n    detailsEntry: JourneyStep;\n    processing: JourneyStep;\n    confirmation: JourneyStep;\n  };\n}\n\nexport interface TeacherOnboardingMetrics extends JourneyMetrics {\n  journeyType: 'teacher_onboarding';\n  steps: {\n    application: JourneyStep;\n    documentation: JourneyStep;\n    verification: JourneyStep;\n    profileSetup: JourneyStep;\n    availabilitySetup: JourneyStep;\n    approval: JourneyStep;\n    activation: JourneyStep;\n  };\n}\n\nexport interface DashboardLoadMetrics extends JourneyMetrics {\n  journeyType: 'dashboard_load';\n  steps: {\n    authentication: JourneyStep;\n    dataFetch: JourneyStep;\n    rendering: JourneyStep;\n    interactivity: JourneyStep;\n  };\n}\n\nexport interface ReportGenerationMetrics extends JourneyMetrics {\n  journeyType: 'report_generation';\n  steps: {\n    request: JourneyStep;\n    parameterSelection: JourneyStep;\n    dataProcessing: JourneyStep;\n    rendering: JourneyStep;\n    download: JourneyStep;\n  };\n}\n\n// =====================================================================================\n// JOURNEY DEFINITIONS\n// =====================================================================================\n\nexport const JOURNEY_METRICS: Record<UserJourneyType, JourneyMetrics> = {\n  student_registration: {\n    journeyType: 'student_registration',\n    targetDuration: 120000, // 2 minutes\n    criticalPath: ['formStart', 'personalInfo', 'courseSelection', 'completion'],\n    abandonmentThreshold: 300000, // 5 minutes\n    conversionGoals: {\n      primary: 'registration_complete',\n      secondary: ['email_verified', 'course_selected']\n    },\n    performanceWeight: 0.9,\n    steps: {\n      landing: {\n        name: 'Landing Page Load',\n        description: 'Initial page load and form presentation',\n        targetDuration: 2000,\n        critical: true,\n        metrics: {\n          loadTime: 2000,\n          interactionDelay: 100\n        }\n      },\n      formStart: {\n        name: 'Form Interaction Start',\n        description: 'User begins filling out registration form',\n        targetDuration: 5000,\n        critical: true,\n        dependencies: ['landing'],\n        metrics: {\n          interactionDelay: 200,\n          errorRate: 0.05\n        }\n      },\n      personalInfo: {\n        name: 'Personal Information Entry',\n        description: 'User enters personal details',\n        targetDuration: 30000,\n        critical: true,\n        dependencies: ['formStart'],\n        metrics: {\n          completionRate: 0.85,\n          errorRate: 0.1\n        }\n      },\n      courseSelection: {\n        name: 'Course Selection',\n        description: 'User selects courses or packages',\n        targetDuration: 45000,\n        critical: true,\n        dependencies: ['personalInfo'],\n        metrics: {\n          loadTime: 1000,\n          completionRate: 0.9\n        }\n      },\n      paymentInfo: {\n        name: 'Payment Information',\n        description: 'User enters payment details',\n        targetDuration: 30000,\n        critical: false,\n        dependencies: ['courseSelection'],\n        metrics: {\n          errorRate: 0.15,\n          completionRate: 0.8\n        }\n      },\n      verification: {\n        name: 'Account Verification',\n        description: 'Email verification and account setup',\n        targetDuration: 5000,\n        critical: false,\n        dependencies: ['paymentInfo'],\n        metrics: {\n          loadTime: 3000,\n          errorRate: 0.05\n        }\n      },\n      completion: {\n        name: 'Registration Completion',\n        description: 'Final confirmation and redirect',\n        targetDuration: 3000,\n        critical: true,\n        dependencies: ['verification'],\n        metrics: {\n          loadTime: 1000,\n          completionRate: 0.95\n        }\n      }\n    }\n  } as StudentRegistrationMetrics,\n\n  class_booking: {\n    journeyType: 'class_booking',\n    targetDuration: 180000, // 3 minutes\n    criticalPath: ['discovery', 'selection', 'timeSlotChoice', 'booking'],\n    abandonmentThreshold: 600000, // 10 minutes\n    conversionGoals: {\n      primary: 'class_booked',\n      secondary: ['time_slot_selected', 'teacher_selected']\n    },\n    performanceWeight: 0.95,\n    steps: {\n      discovery: {\n        name: 'Class Discovery',\n        description: 'User browses available classes',\n        targetDuration: 30000,\n        critical: true,\n        metrics: {\n          loadTime: 2000,\n          interactionDelay: 100\n        }\n      },\n      selection: {\n        name: 'Class Selection',\n        description: 'User selects a specific class type',\n        targetDuration: 20000,\n        critical: true,\n        dependencies: ['discovery'],\n        metrics: {\n          interactionDelay: 200,\n          completionRate: 0.8\n        }\n      },\n      timeSlotChoice: {\n        name: 'Time Slot Selection',\n        description: 'User chooses available time slot',\n        targetDuration: 45000,\n        critical: true,\n        dependencies: ['selection'],\n        metrics: {\n          loadTime: 1500,\n          completionRate: 0.7,\n          errorRate: 0.1\n        }\n      },\n      teacherSelection: {\n        name: 'Teacher Selection',\n        description: 'User selects preferred teacher',\n        targetDuration: 30000,\n        critical: false,\n        dependencies: ['timeSlotChoice'],\n        metrics: {\n          loadTime: 1000,\n          completionRate: 0.9\n        }\n      },\n      confirmation: {\n        name: 'Booking Confirmation',\n        description: 'User reviews and confirms booking details',\n        targetDuration: 30000,\n        critical: false,\n        dependencies: ['teacherSelection'],\n        metrics: {\n          interactionDelay: 100,\n          completionRate: 0.95\n        }\n      },\n      payment: {\n        name: 'Payment Processing',\n        description: 'Payment for the class booking',\n        targetDuration: 20000,\n        critical: false,\n        dependencies: ['confirmation'],\n        metrics: {\n          loadTime: 3000,\n          errorRate: 0.05,\n          completionRate: 0.9\n        }\n      },\n      booking: {\n        name: 'Booking Finalization',\n        description: 'Final booking confirmation and calendar update',\n        targetDuration: 5000,\n        critical: true,\n        dependencies: ['payment'],\n        metrics: {\n          loadTime: 2000,\n          completionRate: 0.98\n        }\n      }\n    }\n  } as ClassBookingMetrics,\n\n  login: {\n    journeyType: 'login',\n    targetDuration: 10000, // 10 seconds\n    criticalPath: ['landing', 'credentialEntry', 'authentication', 'redirection'],\n    abandonmentThreshold: 60000, // 1 minute\n    conversionGoals: {\n      primary: 'login_success',\n      secondary: ['credential_entered']\n    },\n    performanceWeight: 0.8,\n    steps: {\n      landing: {\n        name: 'Login Page Load',\n        description: 'Login form loads and is ready for interaction',\n        targetDuration: 2000,\n        critical: true,\n        metrics: {\n          loadTime: 1500,\n          interactionDelay: 100\n        }\n      },\n      credentialEntry: {\n        name: 'Credential Entry',\n        description: 'User enters username and password',\n        targetDuration: 5000,\n        critical: true,\n        dependencies: ['landing'],\n        metrics: {\n          interactionDelay: 50,\n          errorRate: 0.1\n        }\n      },\n      authentication: {\n        name: 'Authentication Processing',\n        description: 'Server validates credentials',\n        targetDuration: 2000,\n        critical: true,\n        dependencies: ['credentialEntry'],\n        metrics: {\n          loadTime: 1500,\n          errorRate: 0.05\n        }\n      },\n      redirection: {\n        name: 'Post-Login Redirection',\n        description: 'User is redirected to dashboard or intended page',\n        targetDuration: 1000,\n        critical: true,\n        dependencies: ['authentication'],\n        metrics: {\n          loadTime: 800,\n          completionRate: 0.99\n        }\n      }\n    }\n  } as LoginMetrics,\n\n  payment_flow: {\n    journeyType: 'payment_flow',\n    targetDuration: 60000, // 1 minute\n    criticalPath: ['initiation', 'methodSelection', 'detailsEntry', 'processing', 'confirmation'],\n    abandonmentThreshold: 300000, // 5 minutes\n    conversionGoals: {\n      primary: 'payment_success',\n      secondary: ['payment_method_selected', 'details_entered']\n    },\n    performanceWeight: 1.0,\n    steps: {\n      initiation: {\n        name: 'Payment Initiation',\n        description: 'Payment flow starts from checkout',\n        targetDuration: 2000,\n        critical: true,\n        metrics: {\n          loadTime: 1500,\n          interactionDelay: 100\n        }\n      },\n      methodSelection: {\n        name: 'Payment Method Selection',\n        description: 'User selects payment method',\n        targetDuration: 15000,\n        critical: true,\n        dependencies: ['initiation'],\n        metrics: {\n          interactionDelay: 200,\n          completionRate: 0.9\n        }\n      },\n      detailsEntry: {\n        name: 'Payment Details Entry',\n        description: 'User enters payment information',\n        targetDuration: 30000,\n        critical: true,\n        dependencies: ['methodSelection'],\n        metrics: {\n          errorRate: 0.15,\n          completionRate: 0.8\n        }\n      },\n      processing: {\n        name: 'Payment Processing',\n        description: 'Payment is processed by payment gateway',\n        targetDuration: 10000,\n        critical: true,\n        dependencies: ['detailsEntry'],\n        metrics: {\n          loadTime: 8000,\n          errorRate: 0.02,\n          completionRate: 0.95\n        }\n      },\n      confirmation: {\n        name: 'Payment Confirmation',\n        description: 'Payment success confirmation and receipt',\n        targetDuration: 3000,\n        critical: true,\n        dependencies: ['processing'],\n        metrics: {\n          loadTime: 2000,\n          completionRate: 0.99\n        }\n      }\n    }\n  } as PaymentFlowMetrics,\n\n  teacher_onboarding: {\n    journeyType: 'teacher_onboarding',\n    targetDuration: 1800000, // 30 minutes\n    criticalPath: ['application', 'documentation', 'profileSetup', 'activation'],\n    abandonmentThreshold: 3600000, // 1 hour\n    conversionGoals: {\n      primary: 'onboarding_complete',\n      secondary: ['profile_created', 'documentation_uploaded', 'availability_set']\n    },\n    performanceWeight: 0.7,\n    steps: {\n      application: {\n        name: 'Application Submission',\n        description: 'Teacher submits initial application',\n        targetDuration: 300000, // 5 minutes\n        critical: true,\n        metrics: {\n          loadTime: 3000,\n          completionRate: 0.6,\n          errorRate: 0.1\n        }\n      },\n      documentation: {\n        name: 'Document Upload',\n        description: 'Teacher uploads required documents',\n        targetDuration: 600000, // 10 minutes\n        critical: true,\n        dependencies: ['application'],\n        metrics: {\n          loadTime: 5000,\n          errorRate: 0.2,\n          completionRate: 0.7\n        }\n      },\n      verification: {\n        name: 'Document Verification',\n        description: 'Admin verifies submitted documents',\n        targetDuration: 300000, // 5 minutes (automated)\n        critical: false,\n        dependencies: ['documentation'],\n        metrics: {\n          loadTime: 10000,\n          errorRate: 0.05\n        }\n      },\n      profileSetup: {\n        name: 'Profile Setup',\n        description: 'Teacher creates detailed profile',\n        targetDuration: 600000, // 10 minutes\n        critical: true,\n        dependencies: ['verification'],\n        metrics: {\n          interactionDelay: 200,\n          completionRate: 0.8,\n          errorRate: 0.1\n        }\n      },\n      availabilitySetup: {\n        name: 'Availability Setup',\n        description: 'Teacher sets available time slots',\n        targetDuration: 300000, // 5 minutes\n        critical: false,\n        dependencies: ['profileSetup'],\n        metrics: {\n          interactionDelay: 300,\n          completionRate: 0.85\n        }\n      },\n      approval: {\n        name: 'Final Approval',\n        description: 'Admin approves teacher profile',\n        targetDuration: 60000, // 1 minute (automated)\n        critical: false,\n        dependencies: ['availabilitySetup'],\n        metrics: {\n          loadTime: 5000,\n          completionRate: 0.9\n        }\n      },\n      activation: {\n        name: 'Account Activation',\n        description: 'Teacher account is activated and ready',\n        targetDuration: 30000, // 30 seconds\n        critical: true,\n        dependencies: ['approval'],\n        metrics: {\n          loadTime: 2000,\n          completionRate: 0.95\n        }\n      }\n    }\n  } as TeacherOnboardingMetrics,\n\n  dashboard_load: {\n    journeyType: 'dashboard_load',\n    targetDuration: 5000, // 5 seconds\n    criticalPath: ['authentication', 'dataFetch', 'rendering', 'interactivity'],\n    abandonmentThreshold: 30000, // 30 seconds\n    conversionGoals: {\n      primary: 'dashboard_ready',\n      secondary: ['data_loaded', 'interactive']\n    },\n    performanceWeight: 0.9,\n    steps: {\n      authentication: {\n        name: 'Authentication Check',\n        description: 'Verify user authentication status',\n        targetDuration: 500,\n        critical: true,\n        metrics: {\n          loadTime: 300,\n          errorRate: 0.01\n        }\n      },\n      dataFetch: {\n        name: 'Data Fetching',\n        description: 'Load user-specific dashboard data',\n        targetDuration: 2000,\n        critical: true,\n        dependencies: ['authentication'],\n        metrics: {\n          loadTime: 1500,\n          errorRate: 0.05\n        }\n      },\n      rendering: {\n        name: 'Component Rendering',\n        description: 'Render dashboard components and layout',\n        targetDuration: 2000,\n        critical: true,\n        dependencies: ['dataFetch'],\n        metrics: {\n          loadTime: 1500,\n          interactionDelay: 100\n        }\n      },\n      interactivity: {\n        name: 'Interactive Ready',\n        description: 'Dashboard is fully interactive',\n        targetDuration: 500,\n        critical: true,\n        dependencies: ['rendering'],\n        metrics: {\n          interactionDelay: 50,\n          completionRate: 0.99\n        }\n      }\n    }\n  } as DashboardLoadMetrics,\n\n  report_generation: {\n    journeyType: 'report_generation',\n    targetDuration: 15000, // 15 seconds\n    criticalPath: ['request', 'dataProcessing', 'rendering', 'download'],\n    abandonmentThreshold: 120000, // 2 minutes\n    conversionGoals: {\n      primary: 'report_downloaded',\n      secondary: ['parameters_selected', 'report_generated']\n    },\n    performanceWeight: 0.6,\n    steps: {\n      request: {\n        name: 'Report Request',\n        description: 'User initiates report generation',\n        targetDuration: 1000,\n        critical: true,\n        metrics: {\n          interactionDelay: 100,\n          loadTime: 500\n        }\n      },\n      parameterSelection: {\n        name: 'Parameter Selection',\n        description: 'User selects report parameters',\n        targetDuration: 5000,\n        critical: false,\n        dependencies: ['request'],\n        metrics: {\n          interactionDelay: 200,\n          completionRate: 0.9\n        }\n      },\n      dataProcessing: {\n        name: 'Data Processing',\n        description: 'Server processes data for report',\n        targetDuration: 8000,\n        critical: true,\n        dependencies: ['parameterSelection'],\n        metrics: {\n          loadTime: 6000,\n          errorRate: 0.05\n        }\n      },\n      rendering: {\n        name: 'Report Rendering',\n        description: 'Report is rendered and formatted',\n        targetDuration: 3000,\n        critical: true,\n        dependencies: ['dataProcessing'],\n        metrics: {\n          loadTime: 2000,\n          errorRate: 0.02\n        }\n      },\n      download: {\n        name: 'Report Download',\n        description: 'User downloads the generated report',\n        targetDuration: 2000,\n        critical: true,\n        dependencies: ['rendering'],\n        metrics: {\n          loadTime: 1000,\n          completionRate: 0.95\n        }\n      }\n    }\n  } as ReportGenerationMetrics\n};\n\n// =====================================================================================\n// JOURNEY TRACKING UTILITIES\n// =====================================================================================\n\nexport class UserJourneyTracker {\n  private activeJourneys: Map<string, {\n    journeyId: string;\n    metrics: JourneyMetrics;\n    startTime: number;\n    currentStep?: string;\n    stepStartTime?: number;\n    completedSteps: string[];\n  }> = new Map();\n\n  /**\n   * Start tracking a specific user journey\n   */\n  startJourney(journeyType: UserJourneyType, userId?: string): string {\n    const metrics = JOURNEY_METRICS[journeyType];\n    if (!metrics) {\n      throw new Error(`Unknown journey type: ${journeyType}`);\n    }\n\n    const journeyId = enhancedPerformanceMonitor.startUserJourney(journeyType, {\n      targetDuration: metrics.targetDuration,\n      criticalPath: metrics.criticalPath,\n      performanceWeight: metrics.performanceWeight\n    });\n\n    this.activeJourneys.set(journeyId, {\n      journeyId,\n      metrics,\n      startTime: Date.now(),\n      completedSteps: []\n    });\n\n    return journeyId;\n  }\n\n  /**\n   * Mark the start of a journey step\n   */\n  startStep(journeyId: string, stepName: string, metadata?: Record<string, any>) {\n    const journey = this.activeJourneys.get(journeyId);\n    if (!journey) return;\n\n    const stepConfig = (journey.metrics.steps as any)?.[stepName];\n    if (!stepConfig) {\n      logger.warn(`Unknown step '${stepName}' for journey type '${journey.metrics.journeyType}'`);\n      return;\n    }\n\n    journey.currentStep = stepName;\n    journey.stepStartTime = Date.now();\n\n    enhancedPerformanceMonitor.addJourneyStep(journeyId, `${stepName}_start`, {\n      ...metadata,\n      stepConfig,\n      critical: stepConfig.critical,\n      targetDuration: stepConfig.targetDuration\n    });\n  }\n\n  /**\n   * Mark the completion of a journey step\n   */\n  completeStep(journeyId: string, stepName: string, metadata?: Record<string, any>) {\n    const journey = this.activeJourneys.get(journeyId);\n    if (!journey || journey.currentStep !== stepName) return;\n\n    const stepConfig = (journey.metrics.steps as any)?.[stepName];\n    if (!stepConfig) return;\n\n    const stepDuration = Date.now() - (journey.stepStartTime || Date.now());\n    journey.completedSteps.push(stepName);\n    journey.currentStep = undefined;\n    journey.stepStartTime = undefined;\n\n    // Check if step exceeded target duration\n    const isSlowStep = stepDuration > stepConfig.targetDuration;\n    const isCriticalStep = stepConfig.critical;\n\n    enhancedPerformanceMonitor.addJourneyStep(journeyId, `${stepName}_complete`, {\n      ...metadata,\n      stepDuration,\n      targetDuration: stepConfig.targetDuration,\n      isSlowStep,\n      isCriticalStep,\n      exceedsTarget: isSlowStep,\n      performanceImpact: isSlowStep && isCriticalStep ? 'high' : isSlowStep ? 'medium' : 'low'\n    });\n\n    // Create performance alert for slow critical steps\n    if (isSlowStep && isCriticalStep) {\n      logger.warn(\n        `[Performance] Slow critical step '${stepName}' in ${journey.metrics.journeyType}: ${stepDuration}ms (target: ${stepConfig.targetDuration}ms)`\n      );\n    }\n  }\n\n  /**\n   * Mark a journey step as failed\n   */\n  failStep(journeyId: string, stepName: string, error: string, metadata?: Record<string, any>) {\n    const journey = this.activeJourneys.get(journeyId);\n    if (!journey) return;\n\n    const stepDuration = journey.stepStartTime ? Date.now() - journey.stepStartTime : 0;\n\n    enhancedPerformanceMonitor.addJourneyStep(journeyId, `${stepName}_failed`, {\n      ...metadata,\n      stepDuration,\n      error,\n      failed: true\n    });\n\n    // Abandon journey if critical step fails\n    const stepConfig = (journey.metrics.steps as any)?.[stepName];\n    if (stepConfig?.critical) {\n      this.abandonJourney(journeyId, `critical_step_failed: ${stepName}`);\n    }\n  }\n\n  /**\n   * Complete a user journey\n   */\n  completeJourney(journeyId: string, metadata?: Record<string, any>) {\n    const journey = this.activeJourneys.get(journeyId);\n    if (!journey) return;\n\n    const totalDuration = Date.now() - journey.startTime;\n    const targetDuration = journey.metrics.targetDuration;\n    const criticalPathCompleted = journey.metrics.criticalPath.every(step => \n      journey.completedSteps.includes(step)\n    );\n\n    enhancedPerformanceMonitor.completeUserJourney(journeyId, {\n      ...metadata,\n      totalDuration,\n      targetDuration,\n      exceedsTarget: totalDuration > targetDuration,\n      criticalPathCompleted,\n      completedSteps: journey.completedSteps,\n      performanceScore: this.calculateJourneyScore(journey, totalDuration)\n    });\n\n    this.activeJourneys.delete(journeyId);\n  }\n\n  /**\n   * Abandon a user journey\n   */\n  abandonJourney(journeyId: string, reason: string) {\n    const journey = this.activeJourneys.get(journeyId);\n    if (!journey) return;\n\n    const totalDuration = Date.now() - journey.startTime;\n    const abandonmentThreshold = journey.metrics.abandonmentThreshold;\n\n    enhancedPerformanceMonitor.abandonUserJourney(journeyId, reason);\n\n    // Track abandonment analytics\n    logger.warn(\n      `[Journey] User abandoned ${journey.metrics.journeyType} after ${totalDuration}ms. Reason: ${reason}`\n    );\n\n    this.activeJourneys.delete(journeyId);\n  }\n\n  /**\n   * Calculate journey performance score\n   */\n  private calculateJourneyScore(journey: any, totalDuration: number): number {\n    const targetDuration = journey.metrics.targetDuration;\n    const criticalPathCompleted = journey.metrics.criticalPath.every((step: string) => \n      journey.completedSteps.includes(step)\n    );\n\n    let score = 100;\n\n    // Deduct points for exceeding target duration\n    if (totalDuration > targetDuration) {\n      const exceedsBy = totalDuration - targetDuration;\n      const penaltyRatio = exceedsBy / targetDuration;\n      score -= Math.min(50, penaltyRatio * 50); // Max 50 point penalty\n    }\n\n    // Deduct points for incomplete critical path\n    if (!criticalPathCompleted) {\n      score -= 30;\n    }\n\n    // Bonus for fast completion\n    if (totalDuration < targetDuration * 0.8) {\n      score += 10;\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Get performance metrics for a journey type\n   */\n  getJourneyMetrics(journeyType: UserJourneyType): JourneyMetrics | undefined {\n    return JOURNEY_METRICS[journeyType];\n  }\n\n  /**\n   * Get all active journeys\n   */\n  getActiveJourneys() {\n    return Array.from(this.activeJourneys.values());\n  }\n\n  /**\n   * Check for stuck journeys and auto-abandon them\n   */\n  cleanupStuckJourneys() {\n    const now = Date.now();\n    \n    for (const [journeyId, journey] of this.activeJourneys.entries()) {\n      const duration = now - journey.startTime;\n      \n      if (duration > journey.metrics.abandonmentThreshold) {\n        this.abandonJourney(journeyId, 'timeout_cleanup');\n      }\n    }\n  }\n}\n\n// =====================================================================================\n// SINGLETON INSTANCE\n// =====================================================================================\n\nexport const userJourneyTracker = new UserJourneyTracker();\n\n// Auto-cleanup stuck journeys every 5 minutes\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    userJourneyTracker.cleanupStuckJourneys();\n  }, 5 * 60 * 1000);\n}\n\n// =====================================================================================\n// REACT HOOKS FOR JOURNEY TRACKING\n// =====================================================================================\n\nexport function useJourneyTracking(journeyType: UserJourneyType) {\n  const journeyIdRef = React.useRef<string | null>(null);\n  \n  const startJourney = React.useCallback((metadata?: Record<string, any>) => {\n    journeyIdRef.current = userJourneyTracker.startJourney(journeyType);\n    return journeyIdRef.current;\n  }, [journeyType]);\n  \n  const startStep = React.useCallback((stepName: string, metadata?: Record<string, any>) => {\n    if (journeyIdRef.current) {\n      userJourneyTracker.startStep(journeyIdRef.current, stepName, metadata);\n    }\n  }, []);\n  \n  const completeStep = React.useCallback((stepName: string, metadata?: Record<string, any>) => {\n    if (journeyIdRef.current) {\n      userJourneyTracker.completeStep(journeyIdRef.current, stepName, metadata);\n    }\n  }, []);\n  \n  const failStep = React.useCallback((stepName: string, error: string, metadata?: Record<string, any>) => {\n    if (journeyIdRef.current) {\n      userJourneyTracker.failStep(journeyIdRef.current, stepName, error, metadata);\n    }\n  }, []);\n  \n  const completeJourney = React.useCallback((metadata?: Record<string, any>) => {\n    if (journeyIdRef.current) {\n      userJourneyTracker.completeJourney(journeyIdRef.current, metadata);\n      journeyIdRef.current = null;\n    }\n  }, []);\n  \n  const abandonJourney = React.useCallback((reason: string) => {\n    if (journeyIdRef.current) {\n      userJourneyTracker.abandonJourney(journeyIdRef.current, reason);\n      journeyIdRef.current = null;\n    }\n  }, []);\n  \n  // Auto-abandon on unmount\n  React.useEffect(() => {\n    return () => {\n      if (journeyIdRef.current) {\n        userJourneyTracker.abandonJourney(journeyIdRef.current, 'component_unmount');\n      }\n    };\n  }, []);\n  \n  return {\n    startJourney,\n    startStep,\n    completeStep,\n    failStep,\n    completeJourney,\n    abandonJourney,\n    journeyId: journeyIdRef.current,\n    metrics: JOURNEY_METRICS[journeyType]\n  };\n}\n\n// Import React for the hook\nimport React from 'react';