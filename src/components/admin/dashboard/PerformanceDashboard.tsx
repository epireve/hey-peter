"use client";\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Database,\n  Globe,\n  Monitor,\n  TrendingDown,\n  TrendingUp,\n  Users,\n  Zap,\n  RefreshCw,\n  Download,\n  Settings,\n  Eye,\n  BarChart3,\n  Gauge\n} from 'lucide-react';\nimport {\n  usePerformanceMonitoring,\n  usePerformanceAlerts,\n  usePerformanceInsights,\n  useWebVitals,\n  useBundleMetrics\n} from '@/hooks/usePerformanceMonitoring';\nimport { enhancedPerformanceMonitor } from '@/lib/utils/enhanced-performance-monitor';\n\n// =====================================================================================\n// TYPES\n// =====================================================================================\n\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: string;\n  status: 'good' | 'warning' | 'critical';\n  trend: 'up' | 'down' | 'stable';\n  target?: number;\n}\n\ninterface AlertCardProps {\n  alerts: any[];\n  onAcknowledge: (alertId: string) => void;\n}\n\ninterface WebVitalCardProps {\n  webVitals: any;\n}\n\ninterface SystemOverviewProps {\n  performanceData: any;\n}\n\n// =====================================================================================\n// UTILITY FUNCTIONS\n// =====================================================================================\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'good': return 'text-green-600 bg-green-50 border-green-200';\n    case 'warning': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n    case 'critical': return 'text-red-600 bg-red-50 border-red-200';\n    default: return 'text-gray-600 bg-gray-50 border-gray-200';\n  }\n};\n\nconst getTrendIcon = (trend: string) => {\n  switch (trend) {\n    case 'up': return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n    case 'down': return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\n    default: return <Activity className=\"h-4 w-4 text-gray-600\" />;\n  }\n};\n\nconst formatDuration = (ms: number) => {\n  if (ms < 1000) return `${ms.toFixed(0)}ms`;\n  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n  return `${(ms / 60000).toFixed(1)}m`;\n};\n\nconst formatBytes = (bytes: number) => {\n  if (bytes < 1024) return `${bytes}B`;\n  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)}KB`;\n  return `${(bytes / 1024 / 1024).toFixed(1)}MB`;\n};\n\n// =====================================================================================\n// PERFORMANCE SCORE COMPONENT\n// =====================================================================================\n\nfunction PerformanceScoreGauge({ score }: { score: number }) {\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600';\n    if (score >= 70) return 'text-yellow-600';\n    if (score >= 50) return 'text-orange-600';\n    return 'text-red-600';\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 90) return 'Excellent';\n    if (score >= 70) return 'Good';\n    if (score >= 50) return 'Needs Improvement';\n    return 'Poor';\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"flex items-center justify-center gap-2\">\n          <Gauge className=\"h-5 w-5\" />\n          Performance Score\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"text-center\">\n        <div className={`text-6xl font-bold ${getScoreColor(score)}`}>\n          {score.toFixed(0)}\n        </div>\n        <div className=\"text-sm text-gray-600 mt-2\">\n          {getScoreLabel(score)}\n        </div>\n        <Progress value={score} className=\"mt-4\" />\n      </CardContent>\n    </Card>\n  );\n}\n\n// =====================================================================================\n// SYSTEM OVERVIEW COMPONENT\n// =====================================================================================\n\nfunction SystemOverview({ performanceData }: SystemOverviewProps) {\n  const metrics: PerformanceMetric[] = [\n    {\n      name: 'API Response Time',\n      value: performanceData.stats?.api?.average || 0,\n      unit: 'ms',\n      status: (performanceData.stats?.api?.average || 0) < 500 ? 'good' : \n              (performanceData.stats?.api?.average || 0) < 1000 ? 'warning' : 'critical',\n      trend: performanceData.stats?.api?.trend || 'stable',\n      target: 500\n    },\n    {\n      name: 'Database Queries',\n      value: performanceData.stats?.query?.average || 0,\n      unit: 'ms',\n      status: (performanceData.stats?.query?.average || 0) < 100 ? 'good' : \n              (performanceData.stats?.query?.average || 0) < 300 ? 'warning' : 'critical',\n      trend: performanceData.stats?.query?.trend || 'stable',\n      target: 100\n    },\n    {\n      name: 'Render Performance',\n      value: performanceData.stats?.render?.average || 0,\n      unit: 'ms',\n      status: (performanceData.stats?.render?.average || 0) < 16 ? 'good' : \n              (performanceData.stats?.render?.average || 0) < 50 ? 'warning' : 'critical',\n      trend: performanceData.stats?.render?.trend || 'stable',\n      target: 16\n    },\n    {\n      name: 'Error Rate',\n      value: performanceData.stats?.all?.errorRate || 0,\n      unit: '%',\n      status: (performanceData.stats?.all?.errorRate || 0) < 1 ? 'good' : \n              (performanceData.stats?.all?.errorRate || 0) < 5 ? 'warning' : 'critical',\n      trend: 'stable',\n      target: 1\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {metrics.map((metric, index) => (\n        <Card key={index}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">{metric.name}</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <span className=\"text-2xl font-bold\">\n                    {metric.value.toFixed(metric.unit === '%' ? 1 : 0)}\n                  </span>\n                  <span className=\"text-sm text-gray-500\">{metric.unit}</span>\n                  {getTrendIcon(metric.trend)}\n                </div>\n                {metric.target && (\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Target: {metric.target}{metric.unit}\n                  </p>\n                )}\n              </div>\n              <Badge className={getStatusColor(metric.status)}>\n                {metric.status}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// =====================================================================================\n// WEB VITALS COMPONENT\n// =====================================================================================\n\nfunction WebVitalsCard({ webVitals }: WebVitalCardProps) {\n  const vitals = ['LCP', 'FID', 'CLS', 'TTFB'];\n  \n  const getVitalStatus = (vital: any) => {\n    if (!vital || vital.count === 0) return 'unknown';\n    const goodRatio = vital.goodCount / vital.count;\n    if (goodRatio >= 0.75) return 'good';\n    if (goodRatio >= 0.5) return 'warning';\n    return 'critical';\n  };\n\n  const formatVitalValue = (vital: any, vitalName: string) => {\n    if (!vital || vital.count === 0) return 'N/A';\n    const value = vital.latest?.value || vital.average || 0;\n    if (vitalName === 'CLS') return value.toFixed(3);\n    return `${value.toFixed(0)}ms`;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Globe className=\"h-5 w-5\" />\n          Core Web Vitals\n        </CardTitle>\n        <CardDescription>\n          Real-time performance metrics affecting user experience\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {vitals.map((vitalName) => {\n            const vital = webVitals[vitalName];\n            const status = getVitalStatus(vital);\n            \n            return (\n              <div key={vitalName} className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium\">{vitalName}</span>\n                  <Badge className={getStatusColor(status)}>\n                    {status}\n                  </Badge>\n                </div>\n                <div className=\"text-2xl font-bold\">\n                  {formatVitalValue(vital, vitalName)}\n                </div>\n                {vital && vital.count > 0 && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    {vital.goodCount}/{vital.count} good measurements\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// =====================================================================================\n// ALERTS COMPONENT\n// =====================================================================================\n\nfunction AlertsCard({ alerts, onAcknowledge }: AlertCardProps) {\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical': return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      case 'high': return <AlertTriangle className=\"h-4 w-4 text-orange-600\" />;\n      case 'medium': return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      default: return <AlertTriangle className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'border-l-red-500 bg-red-50';\n      case 'high': return 'border-l-orange-500 bg-orange-50';\n      case 'medium': return 'border-l-yellow-500 bg-yellow-50';\n      default: return 'border-l-blue-500 bg-blue-50';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <AlertTriangle className=\"h-5 w-5\" />\n          Performance Alerts\n          {alerts.length > 0 && (\n            <Badge variant=\"destructive\">{alerts.length}</Badge>\n          )}\n        </CardTitle>\n        <CardDescription>\n          Real-time performance issues requiring attention\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {alerts.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <CheckCircle className=\"h-12 w-12 mx-auto mb-2 text-green-500\" />\n            <p>No active performance alerts</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {alerts.slice(0, 5).map((alert) => (\n              <Alert key={alert.id} className={`border-l-4 ${getSeverityColor(alert.severity)}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      {getSeverityIcon(alert.severity)}\n                      <span className=\"font-medium text-sm\">\n                        {alert.type.replace('_', ' ').toUpperCase()}\n                      </span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {alert.severity}\n                      </Badge>\n                    </div>\n                    <AlertDescription className=\"text-sm\">\n                      {alert.message}\n                    </AlertDescription>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      {new Date(alert.timestamp).toLocaleTimeString()}\n                    </div>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onAcknowledge(alert.id)}\n                  >\n                    Dismiss\n                  </Button>\n                </div>\n              </Alert>\n            ))}\n            {alerts.length > 5 && (\n              <p className=\"text-sm text-gray-500 text-center\">\n                +{alerts.length - 5} more alerts\n              </p>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// =====================================================================================\n// PERFORMANCE TRENDS COMPONENT\n// =====================================================================================\n\nfunction PerformanceTrends({ performanceData }: { performanceData: any }) {\n  // Generate sample trend data (in a real app, this would come from historical data)\n  const generateTrendData = (baseValue: number, points: number = 24) => {\n    return Array.from({ length: points }, (_, i) => ({\n      time: new Date(Date.now() - (points - i) * 60 * 60 * 1000).toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit'\n      }),\n      value: baseValue + (Math.random() - 0.5) * baseValue * 0.3\n    }));\n  };\n\n  const apiTrendData = generateTrendData(performanceData.stats?.api?.average || 500);\n  const renderTrendData = generateTrendData(performanceData.stats?.render?.average || 20);\n  const queryTrendData = generateTrendData(performanceData.stats?.query?.average || 80);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <BarChart3 className=\"h-5 w-5\" />\n          Performance Trends (24h)\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"api\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"api\">API Response</TabsTrigger>\n            <TabsTrigger value=\"render\">Render Time</TabsTrigger>\n            <TabsTrigger value=\"query\">DB Queries</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"api\" className=\"mt-4\">\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={apiTrendData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"time\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"value\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    name=\"Response Time (ms)\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"render\" className=\"mt-4\">\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={renderTrendData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"time\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"value\" \n                    stroke=\"#10b981\" \n                    fill=\"#10b981\" \n                    fillOpacity={0.3}\n                    name=\"Render Time (ms)\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"query\" className=\"mt-4\">\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={queryTrendData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"time\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar \n                    dataKey=\"value\" \n                    fill=\"#f59e0b\" \n                    name=\"Query Time (ms)\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n\n// =====================================================================================\n// USER JOURNEYS COMPONENT\n// =====================================================================================\n\nfunction UserJourneysCard({ performanceData }: { performanceData: any }) {\n  const journeys = performanceData.userJourneys || {};\n  const journeyTypes = Object.keys(journeys);\n\n  const getCompletionColor = (rate: number) => {\n    if (rate >= 90) return 'text-green-600';\n    if (rate >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          User Journey Performance\n        </CardTitle>\n        <CardDescription>\n          Key user flow completion rates and timings\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {journeyTypes.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <Activity className=\"h-12 w-12 mx-auto mb-2\" />\n            <p>No journey data available</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {journeyTypes.map((journeyType) => {\n              const journey = journeys[journeyType];\n              return (\n                <div key={journeyType} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium capitalize\">\n                      {journeyType.replace('_', ' ')}\n                    </span>\n                    <Badge variant=\"outline\">\n                      {journey.total} journeys\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-600\">Completion Rate</span>\n                      <div className={`text-lg font-bold ${getCompletionColor(journey.completionRate)}`}>\n                        {journey.completionRate.toFixed(1)}%\n                      </div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Avg Duration</span>\n                      <div className=\"text-lg font-bold\">\n                        {formatDuration(journey.averageDuration)}\n                      </div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Abandoned</span>\n                      <div className=\"text-lg font-bold text-orange-600\">\n                        {journey.abandoned}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Progress \n                    value={journey.completionRate} \n                    className=\"mt-3\" \n                  />\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// =====================================================================================\n// BUNDLE METRICS COMPONENT\n// =====================================================================================\n\nfunction BundleMetricsCard({ bundleMetrics }: { bundleMetrics: any }) {\n  if (!bundleMetrics) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Download className=\"h-5 w-5\" />\n            Bundle Performance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            <Download className=\"h-12 w-12 mx-auto mb-2\" />\n            <p>Bundle metrics not available</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const topChunks = Object.entries(bundleMetrics.chunkSizes)\n    .sort(([,a], [,b]) => (b as number) - (a as number))\n    .slice(0, 5)\n    .map(([name, size]) => ({ name, size: size as number }));\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Download className=\"h-5 w-5\" />\n          Bundle Performance\n        </CardTitle>\n        <CardDescription>\n          JavaScript bundle size and loading performance\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div className=\"p-4 border rounded-lg\">\n            <div className=\"text-sm text-gray-600\">Total Bundle Size</div>\n            <div className=\"text-2xl font-bold\">\n              {formatBytes(bundleMetrics.bundleSize)}\n            </div>\n          </div>\n          <div className=\"p-4 border rounded-lg\">\n            <div className=\"text-sm text-gray-600\">Load Time</div>\n            <div className=\"text-2xl font-bold\">\n              {formatDuration(bundleMetrics.loadTime)}\n            </div>\n          </div>\n          <div className=\"p-4 border rounded-lg\">\n            <div className=\"text-sm text-gray-600\">Cache Hit Rate</div>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {bundleMetrics.cacheHitRate.toFixed(1)}%\n            </div>\n          </div>\n          <div className=\"p-4 border rounded-lg\">\n            <div className=\"text-sm text-gray-600\">Compression</div>\n            <div className=\"text-2xl font-bold\">\n              {(bundleMetrics.compressionRatio * 100).toFixed(0)}%\n            </div>\n          </div>\n        </div>\n        \n        <div>\n          <h4 className=\"font-medium mb-3\">Largest Chunks</h4>\n          <div className=\"space-y-2\">\n            {topChunks.map((chunk, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <span className=\"text-sm truncate flex-1\">{chunk.name}</span>\n                <span className=\"text-sm font-medium\">\n                  {formatBytes(chunk.size)}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// =====================================================================================\n// MAIN DASHBOARD COMPONENT\n// =====================================================================================\n\nexport default function PerformanceDashboard() {\n  const performanceData = usePerformanceMonitoring();\n  const { alerts, acknowledgeAlert } = usePerformanceAlerts();\n  const insights = usePerformanceInsights();\n  const webVitals = useWebVitals();\n  const bundleMetrics = useBundleMetrics();\n  const [isRefreshing, setIsRefreshing] = React.useState(false);\n  const [autoRefresh, setAutoRefresh] = React.useState(true);\n\n  // Auto-refresh every 30 seconds\n  React.useEffect(() => {\n    if (!autoRefresh) return;\n    \n    const interval = setInterval(() => {\n      setIsRefreshing(true);\n      setTimeout(() => setIsRefreshing(false), 1000);\n    }, 30000);\n    \n    return () => clearInterval(interval);\n  }, [autoRefresh]);\n\n  const handleExportReport = () => {\n    const report = enhancedPerformanceMonitor.export();\n    const blob = new Blob([JSON.stringify(report, null, 2)], { \n      type: 'application/json' \n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `performance-report-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleForceRefresh = () => {\n    setIsRefreshing(true);\n    setTimeout(() => setIsRefreshing(false), 1000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Performance Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Real-time application performance monitoring and analytics\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setAutoRefresh(!autoRefresh)}\n            className={autoRefresh ? 'bg-green-50' : ''}\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Auto-refresh {autoRefresh ? 'ON' : 'OFF'}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleForceRefresh}\n            disabled={isRefreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleExportReport}\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Performance Score */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <PerformanceScoreGauge score={performanceData.score} />\n        \n        <div className=\"lg:col-span-3\">\n          <SystemOverview performanceData={performanceData} />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        {/* Web Vitals */}\n        <WebVitalsCard webVitals={webVitals} />\n        \n        {/* Alerts */}\n        <AlertsCard alerts={alerts} onAcknowledge={acknowledgeAlert} />\n      </div>\n\n      {/* Performance Trends */}\n      <PerformanceTrends performanceData={performanceData} />\n\n      {/* User Journeys and Bundle Metrics */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        <UserJourneysCard performanceData={performanceData} />\n        <BundleMetricsCard bundleMetrics={bundleMetrics} />\n      </div>\n\n      {/* Insights and Recommendations */}\n      {insights.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"h-5 w-5\" />\n              Performance Insights\n            </CardTitle>\n            <CardDescription>\n              AI-powered performance recommendations\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {insights.slice(0, 3).map((insight, index) => (\n                <div key={index} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <h4 className=\"font-medium\">{insight.title}</h4>\n                    <Badge \n                      variant={insight.impact === 'high' ? 'destructive' : \n                              insight.impact === 'medium' ? 'default' : 'secondary'}\n                    >\n                      {insight.impact} impact\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mb-2\">{insight.description}</p>\n                  <p className=\"text-sm font-medium text-blue-600\">\n                    💡 {insight.recommendation}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}"