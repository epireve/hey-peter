"use client";\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  LineChart,\n  Line,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip\n} from 'recharts';\nimport {\n  Activity,\n  Clock,\n  Database,\n  Globe,\n  Zap,\n  AlertTriangle,\n  TrendingUp,\n  TrendingDown\n} from 'lucide-react';\nimport {\n  usePerformanceMonitoring,\n  usePerformanceAlerts\n} from '@/hooks/usePerformanceMonitoring';\n\ninterface RealTimeMetric {\n  id: string;\n  name: string;\n  value: number;\n  unit: string;\n  threshold: number;\n  status: 'good' | 'warning' | 'critical';\n  trend: number; // Percentage change\n  icon: React.ReactNode;\n  data: Array<{ time: string; value: number }>;\n}\n\nexport default function RealTimeMetrics() {\n  const performanceData = usePerformanceMonitoring();\n  const { alerts } = usePerformanceAlerts();\n  const [metrics, setMetrics] = React.useState<RealTimeMetric[]>([]);\n  const [lastUpdate, setLastUpdate] = React.useState(new Date());\n\n  // Generate real-time metrics\n  React.useEffect(() => {\n    const updateMetrics = () => {\n      const now = new Date();\n      const timeStr = now.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n\n      const newMetrics: RealTimeMetric[] = [\n        {\n          id: 'api_response',\n          name: 'API Response Time',\n          value: performanceData.stats?.api?.recentAverage || 0,\n          unit: 'ms',\n          threshold: 1000,\n          status: (performanceData.stats?.api?.recentAverage || 0) < 500 ? 'good' : \n                  (performanceData.stats?.api?.recentAverage || 0) < 1000 ? 'warning' : 'critical',\n          trend: Math.random() * 20 - 10, // Simulated trend\n          icon: <Globe className=\"h-4 w-4\" />,\n          data: Array.from({ length: 20 }, (_, i) => ({\n            time: new Date(now.getTime() - (19 - i) * 5000).toLocaleTimeString(),\n            value: (performanceData.stats?.api?.recentAverage || 500) + (Math.random() - 0.5) * 200\n          }))\n        },\n        {\n          id: 'db_queries',\n          name: 'Database Query Time',\n          value: performanceData.stats?.query?.recentAverage || 0,\n          unit: 'ms',\n          threshold: 100,\n          status: (performanceData.stats?.query?.recentAverage || 0) < 50 ? 'good' : \n                  (performanceData.stats?.query?.recentAverage || 0) < 100 ? 'warning' : 'critical',\n          trend: Math.random() * 15 - 7.5,\n          icon: <Database className=\"h-4 w-4\" />,\n          data: Array.from({ length: 20 }, (_, i) => ({\n            time: new Date(now.getTime() - (19 - i) * 5000).toLocaleTimeString(),\n            value: (performanceData.stats?.query?.recentAverage || 50) + (Math.random() - 0.5) * 30\n          }))\n        },\n        {\n          id: 'render_time',\n          name: 'Component Render Time',\n          value: performanceData.stats?.render?.recentAverage || 0,\n          unit: 'ms',\n          threshold: 16,\n          status: (performanceData.stats?.render?.recentAverage || 0) < 16 ? 'good' : \n                  (performanceData.stats?.render?.recentAverage || 0) < 50 ? 'warning' : 'critical',\n          trend: Math.random() * 10 - 5,\n          icon: <Activity className=\"h-4 w-4\" />,\n          data: Array.from({ length: 20 }, (_, i) => ({\n            time: new Date(now.getTime() - (19 - i) * 5000).toLocaleTimeString(),\n            value: (performanceData.stats?.render?.recentAverage || 20) + (Math.random() - 0.5) * 10\n          }))\n        },\n        {\n          id: 'active_users',\n          name: 'Active Users',\n          value: Math.floor(Math.random() * 150) + 50, // Simulated\n          unit: '',\n          threshold: 200,\n          status: 'good',\n          trend: Math.random() * 25 - 12.5,\n          icon: <Zap className=\"h-4 w-4\" />,\n          data: Array.from({ length: 20 }, (_, i) => ({\n            time: new Date(now.getTime() - (19 - i) * 5000).toLocaleTimeString(),\n            value: Math.floor(Math.random() * 150) + 50\n          }))\n        }\n      ];\n\n      setMetrics(newMetrics);\n      setLastUpdate(now);\n    };\n\n    // Initial update\n    updateMetrics();\n    \n    // Update every 5 seconds\n    const interval = setInterval(updateMetrics, 5000);\n    \n    return () => clearInterval(interval);\n  }, [performanceData]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'good': return 'text-green-600 border-green-200 bg-green-50';\n      case 'warning': return 'text-yellow-600 border-yellow-200 bg-yellow-50';\n      case 'critical': return 'text-red-600 border-red-200 bg-red-50';\n      default: return 'text-gray-600 border-gray-200 bg-gray-50';\n    }\n  };\n\n  const getTrendIcon = (trend: number) => {\n    if (trend > 5) return <TrendingUp className=\"h-3 w-3 text-red-600\" />;\n    if (trend < -5) return <TrendingDown className=\"h-3 w-3 text-green-600\" />;\n    return <Activity className=\"h-3 w-3 text-gray-600\" />;\n  };\n\n  const criticalAlerts = alerts.filter(alert => alert.severity === 'critical');\n  const highAlerts = alerts.filter(alert => alert.severity === 'high');\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Status Overview */}\n      {(criticalAlerts.length > 0 || highAlerts.length > 0) && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription>\n            <span className=\"font-medium\">Performance Issues Detected:</span>\n            {\" \"}\n            {criticalAlerts.length > 0 && (\n              <span className=\"text-red-600\">\n                {criticalAlerts.length} critical\n              </span>\n            )}\n            {criticalAlerts.length > 0 && highAlerts.length > 0 && \", \"}\n            {highAlerts.length > 0 && (\n              <span className=\"text-orange-600\">\n                {highAlerts.length} high priority\n              </span>\n            )}\n            {\" alerts requiring immediate attention.\"}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Real-time Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {metrics.map((metric) => (\n          <Card key={metric.id} className={`border-2 ${getStatusColor(metric.status)}`}>\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  {metric.icon}\n                  <span className=\"text-sm font-medium\">{metric.name}</span>\n                </div>\n                <Badge \n                  variant={metric.status === 'critical' ? 'destructive' : \n                          metric.status === 'warning' ? 'secondary' : 'default'}\n                  className=\"text-xs\"\n                >\n                  {metric.status}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-end justify-between mb-2\">\n                <div>\n                  <div className=\"text-2xl font-bold\">\n                    {metric.value.toFixed(metric.unit === 'ms' ? 0 : 0)}\n                    <span className=\"text-sm font-normal text-gray-500 ml-1\">\n                      {metric.unit}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-1 text-xs text-gray-600\">\n                    {getTrendIcon(metric.trend)}\n                    <span>\n                      {metric.trend > 0 ? '+' : ''}{metric.trend.toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n                \n                {/* Mini chart */}\n                <div className=\"w-16 h-8\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={metric.data.slice(-8)}>\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"value\" \n                        stroke={metric.status === 'critical' ? '#dc2626' : \n                               metric.status === 'warning' ? '#d97706' : '#059669'} \n                        strokeWidth={1.5}\n                        dot={false}\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n              \n              {metric.value > metric.threshold && (\n                <div className=\"text-xs text-red-600 font-medium\">\n                  ⚠️ Above threshold ({metric.threshold}{metric.unit})\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Detailed Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {metrics.slice(0, 2).map((metric) => (\n          <Card key={`chart-${metric.id}`}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                {metric.icon}\n                {metric.name} Trend\n              </CardTitle>\n              <CardDescription>\n                Real-time monitoring over the last 2 minutes\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={metric.data}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"time\" \n                      tick={{ fontSize: 12 }}\n                      interval=\"preserveStartEnd\"\n                    />\n                    <YAxis tick={{ fontSize: 12 }} />\n                    <Tooltip \n                      formatter={(value: number) => [\n                        `${value.toFixed(0)}${metric.unit}`, \n                        metric.name\n                      ]}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"value\" \n                      stroke={metric.status === 'critical' ? '#dc2626' : \n                             metric.status === 'warning' ? '#d97706' : '#059669'}\n                      strokeWidth={2}\n                      dot={{ r: 2 }}\n                    />\n                    {/* Threshold line */}\n                    <Line \n                      type=\"monotone\" \n                      dataKey={() => metric.threshold}\n                      stroke=\"#ef4444\"\n                      strokeDasharray=\"5 5\"\n                      strokeWidth={1}\n                      dot={false}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"flex items-center justify-between mt-4 text-sm text-gray-600\">\n                <span>Threshold: {metric.threshold}{metric.unit}</span>\n                <span>Last updated: {lastUpdate.toLocaleTimeString()}</span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Performance Status Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            System Status Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"p-4 border rounded-lg\">\n              <div className=\"text-sm text-gray-600\">Overall Performance</div>\n              <div className={`text-2xl font-bold ${\n                performanceData.score >= 90 ? 'text-green-600' :\n                performanceData.score >= 70 ? 'text-yellow-600' : 'text-red-600'\n              }`}>\n                {performanceData.score.toFixed(0)}/100\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {performanceData.score >= 90 ? 'Excellent' :\n                 performanceData.score >= 70 ? 'Good' :\n                 performanceData.score >= 50 ? 'Needs Improvement' : 'Poor'}\n              </div>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <div className=\"text-sm text-gray-600\">Active Alerts</div>\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {alerts.length}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {criticalAlerts.length} critical, {highAlerts.length} high\n              </div>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <div className=\"text-sm text-gray-600\">Uptime</div>\n              <div className=\"text-2xl font-bold text-green-600\">\n                99.9%\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Last 30 days\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"