/**\n * HeyPeter Academy - Booking Recommendations Component\n * \n * Displays auto-matching results and booking recommendations for 1v1 sessions.\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Star, \n  Clock, \n  Calendar, \n  CheckCircle, \n  AlertCircle,\n  ThumbsUp,\n  ThumbsDown,\n  Users,\n  TrendingUp,\n  MessageCircle,\n  ExternalLink\n} from 'lucide-react';\nimport type { \n  OneOnOneBookingResult,\n  OneOnOneBookingRecommendation,\n  TeacherMatchingScore\n} from '@/types/scheduling';\n\ninterface BookingRecommendationsProps {\n  result: OneOnOneBookingResult;\n  onBookingSelect: (recommendation: OneOnOneBookingRecommendation) => void;\n  onAlternativeRequest?: () => void;\n}\n\nexport function BookingRecommendations({ \n  result, \n  onBookingSelect, \n  onAlternativeRequest \n}: BookingRecommendationsProps) {\n  const [selectedRecommendation, setSelectedRecommendation] = useState<string | null>(null);\n\n  /**\n   * Render successful booking\n   */\n  const renderSuccessfulBooking = () => {\n    if (!result.booking) return null;\n\n    return (\n      <Alert className=\"border-green-200 bg-green-50\">\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n        <AlertDescription className=\"text-green-800\">\n          <div className=\"space-y-2\">\n            <h4 className=\"font-semibold\">Booking Confirmed!</h4>\n            <p>Your 1-on-1 session has been successfully booked.</p>\n            \n            <div className=\"grid grid-cols-2 gap-4 mt-3 text-sm\">\n              <div>\n                <span className=\"font-medium\">Reference:</span>\n                <p>{result.booking.bookingReference}</p>\n              </div>\n              <div>\n                <span className=\"font-medium\">Duration:</span>\n                <p>{result.booking.duration} minutes</p>\n              </div>\n              <div>\n                <span className=\"font-medium\">Time:</span>\n                <p>{result.booking.timeSlot.startTime} - {result.booking.timeSlot.endTime}</p>\n              </div>\n              <div>\n                <span className=\"font-medium\">Location:</span>\n                <p>{result.booking.location}</p>\n              </div>\n            </div>\n\n            {result.booking.meetingLink && (\n              <div className=\"mt-3\">\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n                  <ExternalLink className=\"w-4 h-4\" />\n                  Join Meeting\n                </Button>\n              </div>\n            )}\n          </div>\n        </AlertDescription>\n      </Alert>\n    );\n  };\n\n  /**\n   * Render failed booking with recommendations\n   */\n  const renderFailedBooking = () => {\n    if (result.success || !result.recommendations || result.recommendations.length === 0) {\n      return (\n        <Alert className=\"border-orange-200 bg-orange-50\">\n          <AlertCircle className=\"h-4 w-4 text-orange-600\" />\n          <AlertDescription className=\"text-orange-800\">\n            <h4 className=\"font-semibold mb-2\">No Perfect Match Found</h4>\n            <p>We couldn't find an exact match for your preferences, but we have some alternatives to consider.</p>\n            \n            {onAlternativeRequest && (\n              <Button variant=\"outline\" size=\"sm\" className=\"mt-3\" onClick={onAlternativeRequest}>\n                Explore Alternatives\n              </Button>\n            )}\n          </AlertDescription>\n        </Alert>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        <Alert className=\"border-blue-200 bg-blue-50\">\n          <Users className=\"h-4 w-4 text-blue-600\" />\n          <AlertDescription className=\"text-blue-800\">\n            <h4 className=\"font-semibold mb-1\">Great Matches Found!</h4>\n            <p>We found {result.recommendations.length} excellent teacher recommendations for you.</p>\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"space-y-4\">\n          {result.recommendations.map((recommendation, index) => \n            renderRecommendationCard(recommendation, index)\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  /**\n   * Render individual recommendation card\n   */\n  const renderRecommendationCard = (recommendation: OneOnOneBookingRecommendation, index: number) => {\n    const isSelected = selectedRecommendation === recommendation.id;\n    const teacher = recommendation.teacherMatch;\n    \n    return (\n      <Card \n        key={recommendation.id}\n        className={`cursor-pointer transition-all hover:shadow-md ${\n          isSelected ? 'ring-2 ring-primary' : ''\n        }`}\n        onClick={() => setSelectedRecommendation(recommendation.id)}\n      >\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {index === 0 && (\n                <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                  Best Match\n                </Badge>\n              )}\n              <Badge variant=\"outline\">\n                {Math.round(teacher.overallScore * 100)}% Match\n              </Badge>\n              <Badge variant=\"secondary\">\n                {Math.round(recommendation.confidence * 100)}% Confidence\n              </Badge>\n            </div>\n            \n            <div className=\"text-right text-sm text-muted-foreground\">\n              Rank #{index + 1}\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          {/* Teacher Info */}\n          <div className=\"flex items-start gap-4\">\n            <Avatar className=\"w-16 h-16\">\n              <AvatarImage src={`/api/placeholder/64/64`} alt=\"Teacher\" />\n              <AvatarFallback>\n                {teacher.teacherId.slice(0, 2).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-lg mb-1\">Teacher #{teacher.teacherId.slice(-4)}</h3>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                {teacher.matchingRationale}\n              </p>\n              \n              <div className=\"flex items-center gap-4 text-sm\">\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  <span>{teacher.scoreBreakdown.performanceScore.toFixed(1)}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <TrendingUp className=\"w-4 h-4 text-green-500\" />\n                  <span>{Math.round(teacher.scoreBreakdown.experienceScore * 100)}% Experience Match</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Matching Score Breakdown */}\n          <div className=\"bg-muted/50 rounded-lg p-3\">\n            <h4 className=\"font-semibold text-sm mb-2\">Matching Score Breakdown</h4>\n            <div className=\"grid grid-cols-2 gap-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span>Availability:</span>\n                <span className=\"font-medium\">{Math.round(teacher.scoreBreakdown.availabilityScore * 100)}%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Specialization:</span>\n                <span className=\"font-medium\">{Math.round(teacher.scoreBreakdown.specializationScore * 100)}%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Experience:</span>\n                <span className=\"font-medium\">{Math.round(teacher.scoreBreakdown.experienceScore * 100)}%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Preference:</span>\n                <span className=\"font-medium\">{Math.round(teacher.scoreBreakdown.preferenceScore * 100)}%</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Time Slot */}\n          <div className=\"flex items-center justify-between p-3 border rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4 text-blue-500\" />\n              <div>\n                <p className=\"font-medium\">Recommended Time</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {recommendation.recommendedSlot.startTime} - {recommendation.recommendedSlot.endTime}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <p className=\"text-sm font-medium text-green-600\">\n                {Math.round(recommendation.bookingSuccessProbability * 100)}% Success Rate\n              </p>\n            </div>\n          </div>\n\n          {/* Benefits and Drawbacks */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {recommendation.benefits.length > 0 && (\n              <div>\n                <h5 className=\"font-semibold text-sm text-green-700 mb-2 flex items-center gap-1\">\n                  <ThumbsUp className=\"w-4 h-4\" />\n                  Benefits\n                </h5>\n                <ul className=\"text-sm space-y-1\">\n                  {recommendation.benefits.slice(0, 3).map((benefit, idx) => (\n                    <li key={idx} className=\"flex items-start gap-2\">\n                      <CheckCircle className=\"w-3 h-3 text-green-500 mt-0.5 flex-shrink-0\" />\n                      <span>{benefit}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            \n            {recommendation.drawbacks.length > 0 && (\n              <div>\n                <h5 className=\"font-semibold text-sm text-orange-700 mb-2 flex items-center gap-1\">\n                  <ThumbsDown className=\"w-4 h-4\" />\n                  Considerations\n                </h5>\n                <ul className=\"text-sm space-y-1\">\n                  {recommendation.drawbacks.slice(0, 3).map((drawback, idx) => (\n                    <li key={idx} className=\"flex items-start gap-2\">\n                      <AlertCircle className=\"w-3 h-3 text-orange-500 mt-0.5 flex-shrink-0\" />\n                      <span>{drawback}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </div>\n\n          {/* Alternative Time Slots */}\n          {recommendation.alternativeSlots.length > 0 && (\n            <div>\n              <h5 className=\"font-semibold text-sm mb-2\">Alternative Times</h5>\n              <div className=\"flex flex-wrap gap-2\">\n                {recommendation.alternativeSlots.slice(0, 3).map((slot, idx) => (\n                  <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                    {slot.startTime} - {slot.endTime}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Booking Constraints */}\n          <div className=\"text-xs text-muted-foreground bg-muted/30 rounded p-2\">\n            <p><strong>Booking Policy:</strong> {recommendation.constraints.cancellationPolicy}</p>\n            <p><strong>Rescheduling:</strong> {recommendation.constraints.reschedulingPolicy}</p>\n          </div>\n\n          {/* Action Button */}\n          <Button \n            className=\"w-full\"\n            variant={isSelected ? \"default\" : \"outline\"}\n            onClick={(e) => {\n              e.stopPropagation();\n              onBookingSelect(recommendation);\n            }}\n          >\n            {isSelected ? 'Book This Session' : 'Select This Teacher'}\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  /**\n   * Render booking metrics\n   */\n  const renderMetrics = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Matching Process</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-primary\">{result.metrics.teachersEvaluated}</p>\n            <p className=\"text-muted-foreground\">Teachers Evaluated</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-primary\">{result.metrics.timeSlotsConsidered}</p>\n            <p className=\"text-muted-foreground\">Time Slots Considered</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-primary\">{result.metrics.processingTime}ms</p>\n            <p className=\"text-muted-foreground\">Processing Time</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-primary\">{result.metrics.algorithmVersion}</p>\n            <p className=\"text-muted-foreground\">Algorithm Version</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  /**\n   * Render conflicts if any\n   */\n  const renderConflicts = () => {\n    if (!result.conflicts || result.conflicts.length === 0) return null;\n\n    return (\n      <Alert className=\"border-red-200 bg-red-50\">\n        <AlertCircle className=\"h-4 w-4 text-red-600\" />\n        <AlertDescription className=\"text-red-800\">\n          <h4 className=\"font-semibold mb-2\">Scheduling Conflicts Detected</h4>\n          <ul className=\"space-y-1 text-sm\">\n            {result.conflicts.slice(0, 3).map((conflict, index) => (\n              <li key={index}>• {conflict.description}</li>\n            ))}\n          </ul>\n        </AlertDescription>\n      </Alert>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main result */}\n      {result.success ? renderSuccessfulBooking() : renderFailedBooking()}\n      \n      {/* Conflicts */}\n      {renderConflicts()}\n      \n      {/* Metrics */}\n      {renderMetrics()}\n      \n      {/* Error details */}\n      {result.error && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertCircle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            <h4 className=\"font-semibold mb-1\">Booking Error</h4>\n            <p>{result.error.message}</p>\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}"