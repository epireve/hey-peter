/**\n * HeyPeter Academy - Learning Goals Form\n * \n * Component for students to specify their learning objectives and goals\n * for 1v1 sessions.\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  BookOpen, \n  Target, \n  TrendingUp, \n  MessageCircle, \n  FileText, \n  Headphones,\n  Mic,\n  PenTool,\n  ChevronRight,\n  Plus,\n  X\n} from 'lucide-react';\nimport type { OneOnOneLearningGoals, LearningSkill } from '@/types/scheduling';\n\ninterface LearningGoalsFormProps {\n  onSubmit: (goals: OneOnOneLearningGoals) => void;\n  initialGoals?: OneOnOneLearningGoals | null;\n}\n\ninterface SkillCategory {\n  id: string;\n  name: string;\n  icon: React.ComponentType<{ className?: string }>;\n  skills: string[];\n  description: string;\n}\n\nconst skillCategories: SkillCategory[] = [\n  {\n    id: 'speaking',\n    name: 'Speaking',\n    icon: Mic,\n    description: 'Improve your oral communication skills',\n    skills: [\n      'Conversational fluency',\n      'Pronunciation',\n      'Accent reduction',\n      'Public speaking',\n      'Business presentations',\n      'Interview skills'\n    ]\n  },\n  {\n    id: 'listening',\n    name: 'Listening',\n    icon: Headphones,\n    description: 'Enhance your listening comprehension',\n    skills: [\n      'Audio comprehension',\n      'Note-taking',\n      'Following instructions',\n      'Understanding accents',\n      'Media comprehension',\n      'Academic lectures'\n    ]\n  },\n  {\n    id: 'reading',\n    name: 'Reading',\n    icon: BookOpen,\n    description: 'Develop reading skills and comprehension',\n    skills: [\n      'Reading speed',\n      'Comprehension',\n      'Academic texts',\n      'Business documents',\n      'News articles',\n      'Literature analysis'\n    ]\n  },\n  {\n    id: 'writing',\n    name: 'Writing',\n    icon: PenTool,\n    description: 'Master written communication',\n    skills: [\n      'Essay writing',\n      'Business emails',\n      'Creative writing',\n      'Academic papers',\n      'Grammar accuracy',\n      'Vocabulary expansion'\n    ]\n  },\n  {\n    id: 'grammar',\n    name: 'Grammar',\n    icon: FileText,\n    description: 'Perfect your grammatical accuracy',\n    skills: [\n      'Sentence structure',\n      'Verb tenses',\n      'Articles usage',\n      'Prepositions',\n      'Complex sentences',\n      'Conditional forms'\n    ]\n  },\n  {\n    id: 'vocabulary',\n    name: 'Vocabulary',\n    icon: MessageCircle,\n    description: 'Expand and refine your word knowledge',\n    skills: [\n      'General vocabulary',\n      'Business terms',\n      'Academic vocabulary',\n      'Idioms & phrases',\n      'Technical terminology',\n      'Colloquial expressions'\n    ]\n  }\n];\n\nconst commonObjectives = [\n  'Improve conversation skills',\n  'Prepare for job interviews',\n  'Academic English improvement',\n  'Business English proficiency',\n  'IELTS/TOEFL preparation',\n  'Accent reduction',\n  'Presentation skills',\n  'Writing improvement',\n  'Grammar correction',\n  'Vocabulary expansion'\n];\n\nconst proficiencyLevels = [\n  { value: 1, label: 'Beginner (A1)' },\n  { value: 2, label: 'Elementary (A2)' },\n  { value: 3, label: 'Pre-Intermediate (B1)' },\n  { value: 4, label: 'Intermediate (B2)' },\n  { value: 5, label: 'Upper-Intermediate (C1)' },\n  { value: 6, label: 'Advanced (C2)' }\n];\n\nexport function LearningGoalsForm({ onSubmit, initialGoals }: LearningGoalsFormProps) {\n  const [selectedObjectives, setSelectedObjectives] = useState<string[]>(\n    initialGoals?.primaryObjectives || []\n  );\n  const [selectedSkills, setSelectedSkills] = useState<LearningSkill[]>(\n    initialGoals?.skillFocus || []\n  );\n  const [improvementAreas, setImprovementAreas] = useState<string[]>(\n    initialGoals?.improvementAreas || []\n  );\n  const [targetLevel, setTargetLevel] = useState<number | undefined>(\n    initialGoals?.targetProficiencyLevel\n  );\n  const [sessionGoals, setSessionGoals] = useState(initialGoals?.sessionGoals?.join(', ') || '');\n  const [longTermGoals, setLongTermGoals] = useState(initialGoals?.longTermGoals?.join(', ') || '');\n  const [customObjective, setCustomObjective] = useState('');\n\n  /**\n   * Handle objective selection\n   */\n  const handleObjectiveToggle = (objective: string) => {\n    setSelectedObjectives(prev => {\n      if (prev.includes(objective)) {\n        return prev.filter(obj => obj !== objective);\n      } else {\n        return [...prev, objective].slice(0, 5); // Max 5 objectives\n      }\n    });\n  };\n\n  /**\n   * Handle skill selection\n   */\n  const handleSkillToggle = (categoryId: string, skillName: string) => {\n    const skill: LearningSkill = {\n      id: `${categoryId}-${skillName.toLowerCase().replace(/\\s+/g, '-')}`,\n      name: skillName,\n      category: categoryId as any,\n      level: targetLevel || 5,\n      weight: 1.0\n    };\n\n    setSelectedSkills(prev => {\n      const exists = prev.find(s => s.id === skill.id);\n      if (exists) {\n        return prev.filter(s => s.id !== skill.id);\n      } else {\n        return [...prev, skill].slice(0, 8); // Max 8 skills\n      }\n    });\n  };\n\n  /**\n   * Add custom objective\n   */\n  const addCustomObjective = () => {\n    if (customObjective.trim() && !selectedObjectives.includes(customObjective.trim())) {\n      setSelectedObjectives(prev => [...prev, customObjective.trim()].slice(0, 5));\n      setCustomObjective('');\n    }\n  };\n\n  /**\n   * Handle form submission\n   */\n  const handleSubmit = () => {\n    if (selectedObjectives.length === 0) {\n      alert('Please select at least one learning objective');\n      return;\n    }\n\n    const goals: OneOnOneLearningGoals = {\n      primaryObjectives: selectedObjectives,\n      skillFocus: selectedSkills,\n      improvementAreas,\n      targetProficiencyLevel: targetLevel,\n      sessionGoals: sessionGoals ? sessionGoals.split(',').map(g => g.trim()).filter(Boolean) : [],\n      longTermGoals: longTermGoals ? longTermGoals.split(',').map(g => g.trim()).filter(Boolean) : []\n    };\n\n    onSubmit(goals);\n  };\n\n  /**\n   * Check if skill is selected\n   */\n  const isSkillSelected = (categoryId: string, skillName: string) => {\n    const skillId = `${categoryId}-${skillName.toLowerCase().replace(/\\s+/g, '-')}`;\n    return selectedSkills.some(s => s.id === skillId);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-2\">Define Your Learning Goals</h3>\n        <p className=\"text-muted-foreground\">\n          Help us match you with the perfect teacher by specifying what you want to achieve\n        </p>\n      </div>\n\n      {/* Primary Objectives */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            Primary Learning Objectives\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Select up to 5 main goals for your 1-on-1 sessions\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n            {commonObjectives.map(objective => {\n              const isSelected = selectedObjectives.includes(objective);\n              \n              return (\n                <div key={objective} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={objective}\n                    checked={isSelected}\n                    onCheckedChange={() => handleObjectiveToggle(objective)}\n                    disabled={!isSelected && selectedObjectives.length >= 5}\n                  />\n                  <Label htmlFor={objective} className=\"text-sm cursor-pointer\">\n                    {objective}\n                  </Label>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Custom objective input */}\n          <div className=\"flex gap-2\">\n            <Textarea\n              placeholder=\"Add your own learning objective...\"\n              value={customObjective}\n              onChange={(e) => setCustomObjective(e.target.value)}\n              className=\"flex-1\"\n              rows={2}\n            />\n            <Button \n              onClick={addCustomObjective}\n              disabled={!customObjective.trim() || selectedObjectives.length >= 5}\n              size=\"sm\"\n            >\n              <Plus className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Selected objectives */}\n          {selectedObjectives.length > 0 && (\n            <div>\n              <Label className=\"text-sm font-medium\">Selected Objectives:</Label>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {selectedObjectives.map(objective => (\n                  <Badge key={objective} variant=\"secondary\" className=\"flex items-center gap-1\">\n                    {objective}\n                    <X \n                      className=\"w-3 h-3 cursor-pointer\" \n                      onClick={() => handleObjectiveToggle(objective)}\n                    />\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Skill Focus Areas */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"w-5 h-5\" />\n            Skill Focus Areas\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Choose specific skills you want to work on (up to 8)\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {skillCategories.map(category => {\n              const Icon = category.icon;\n              \n              return (\n                <Card key={category.id} className=\"border-dashed\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Icon className=\"w-4 h-4\" />\n                      <h4 className=\"font-semibold text-sm\">{category.name}</h4>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {category.description}\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-2\">\n                      {category.skills.map(skill => {\n                        const isSelected = isSkillSelected(category.id, skill);\n                        \n                        return (\n                          <div key={skill} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={`${category.id}-${skill}`}\n                              checked={isSelected}\n                              onCheckedChange={() => handleSkillToggle(category.id, skill)}\n                              disabled={!isSelected && selectedSkills.length >= 8}\n                            />\n                            <Label \n                              htmlFor={`${category.id}-${skill}`} \n                              className=\"text-xs cursor-pointer\"\n                            >\n                              {skill}\n                            </Label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Selected skills summary */}\n          {selectedSkills.length > 0 && (\n            <div className=\"mt-4\">\n              <Label className=\"text-sm font-medium\">Selected Skills ({selectedSkills.length}/8):</Label>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {selectedSkills.map(skill => (\n                  <Badge key={skill.id} variant=\"outline\" className=\"flex items-center gap-1\">\n                    {skill.name}\n                    <X \n                      className=\"w-3 h-3 cursor-pointer\" \n                      onClick={() => setSelectedSkills(prev => prev.filter(s => s.id !== skill.id))}\n                    />\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Target Proficiency Level */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            Target Proficiency Level\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Select value={targetLevel?.toString()} onValueChange={(value) => setTargetLevel(parseInt(value))}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select your target level\" />\n            </SelectTrigger>\n            <SelectContent>\n              {proficiencyLevels.map(level => (\n                <SelectItem key={level.value} value={level.value.toString()}>\n                  {level.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Additional Goals */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Additional Details</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"session-goals\">Session-specific Goals</Label>\n            <Textarea\n              id=\"session-goals\"\n              placeholder=\"What do you want to achieve in each session? (e.g., practice conversation, review homework, prepare for presentation)\"\n              value={sessionGoals}\n              onChange={(e) => setSessionGoals(e.target.value)}\n              rows={3}\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"long-term-goals\">Long-term Goals</Label>\n            <Textarea\n              id=\"long-term-goals\"\n              placeholder=\"What are your long-term English learning goals? (e.g., pass IELTS exam, get promoted, study abroad)\"\n              value={longTermGoals}\n              onChange={(e) => setLongTermGoals(e.target.value)}\n              rows={3}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary and Navigation */}\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardContent className=\"p-4\">\n          <h4 className=\"font-semibold text-blue-900 mb-2\">Goals Summary</h4>\n          <div className=\"text-sm text-blue-700 space-y-1\">\n            <p><strong>{selectedObjectives.length}</strong> primary objectives selected</p>\n            <p><strong>{selectedSkills.length}</strong> specific skills to focus on</p>\n            {targetLevel && <p>Target level: <strong>{proficiencyLevels.find(l => l.value === targetLevel)?.label}</strong></p>}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex justify-end\">\n        <Button \n          onClick={handleSubmit}\n          disabled={selectedObjectives.length === 0}\n          className=\"flex items-center gap-2\"\n        >\n          Continue\n          <ChevronRight className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}"