/**
 * HeyPeter Academy - Teacher Selection Interface
 * 
 * Component for browsing and selecting teachers for 1v1 sessions.
 * Features:
 * - Teacher profile cards with ratings and specializations
 * - Filter and search functionality
 * - Preference selection for auto-matching
 * - Availability preview
 */

'use client';

import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { \n  Star, \n  Clock, \n  Calendar, \n  Users, \n  BookOpen, \n  Search,\n  Filter,\n  ChevronLeft,\n  ChevronRight,\n  Heart,\n  MessageCircle\n} from 'lucide-react';\nimport type { \n  TeacherProfileForBooking,\n  TeacherSelectionPreferences,\n} from '@/types/scheduling';\n\ninterface TeacherSelectionInterfaceProps {\n  availableTeachers: TeacherProfileForBooking[];\n  preferences: TeacherSelectionPreferences;\n  onSelection: (preferences: TeacherSelectionPreferences) => void;\n  onBack: () => void;\n  loading?: boolean;\n}\n\ntype SortOption = 'rating' | 'experience' | 'availability' | 'price';\n\nexport function TeacherSelectionInterface({\n  availableTeachers,\n  preferences,\n  onSelection,\n  onBack,\n  loading = false\n}: TeacherSelectionInterfaceProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTeachers, setSelectedTeachers] = useState<string[]>(preferences.preferredTeacherIds);\n  const [filters, setFilters] = useState({\n    experienceLevel: preferences.experienceLevel || '',\n    genderPreference: preferences.genderPreference || 'no_preference',\n    minRating: 0,\n    maxPrice: 200,\n    specializations: preferences.languageSpecializations || [],\n  });\n  const [sortBy, setSortBy] = useState<SortOption>('rating');\n  const [viewMode, setViewMode] = useState<'browse' | 'auto-match'>('browse');\n\n  /**\n   * Filter and sort teachers based on current criteria\n   */\n  const filteredTeachers = useMemo(() => {\n    let filtered = availableTeachers.filter(teacher => {\n      // Search query filter\n      if (searchQuery) {\n        const query = searchQuery.toLowerCase();\n        const matchesName = teacher.fullName.toLowerCase().includes(query);\n        const matchesBio = teacher.bio.toLowerCase().includes(query);\n        const matchesSpecializations = teacher.specializations.some(spec => \n          spec.toLowerCase().includes(query)\n        );\n        \n        if (!matchesName && !matchesBio && !matchesSpecializations) {\n          return false;\n        }\n      }\n\n      // Rating filter\n      if (teacher.ratings.averageRating < filters.minRating) {\n        return false;\n      }\n\n      // Price filter\n      if (teacher.pricing.rate60Min > filters.maxPrice) {\n        return false;\n      }\n\n      // Specialization filter\n      if (filters.specializations.length > 0) {\n        const hasMatchingSpec = filters.specializations.some(spec =>\n          teacher.specializations.some(teacherSpec => \n            teacherSpec.toLowerCase().includes(spec.toLowerCase())\n          )\n        );\n        if (!hasMatchingSpec) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    // Sort teachers\n    return filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'rating':\n          return b.ratings.averageRating - a.ratings.averageRating;\n        case 'experience':\n          return b.experienceYears - a.experienceYears;\n        case 'availability':\n          return b.availabilitySummary.availableThisWeek - a.availabilitySummary.availableThisWeek;\n        case 'price':\n          return a.pricing.rate60Min - b.pricing.rate60Min;\n        default:\n          return 0;\n      }\n    });\n  }, [availableTeachers, searchQuery, filters, sortBy]);\n\n  /**\n   * Handle teacher selection\n   */\n  const handleTeacherToggle = (teacherId: string) => {\n    setSelectedTeachers(prev => {\n      if (prev.includes(teacherId)) {\n        return prev.filter(id => id !== teacherId);\n      } else {\n        return [...prev, teacherId].slice(0, 3); // Max 3 preferred teachers\n      }\n    });\n  };\n\n  /**\n   * Handle filter changes\n   */\n  const handleFilterChange = (key: string, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  /**\n   * Submit selection\n   */\n  const handleSubmit = () => {\n    const updatedPreferences: TeacherSelectionPreferences = {\n      ...preferences,\n      preferredTeacherIds: selectedTeachers,\n      experienceLevel: filters.experienceLevel as any,\n      genderPreference: filters.genderPreference as any,\n      languageSpecializations: filters.specializations,\n    };\n    \n    onSelection(updatedPreferences);\n  };\n\n  /**\n   * Render teacher card\n   */\n  const renderTeacherCard = (teacher: TeacherProfileForBooking) => {\n    const isSelected = selectedTeachers.includes(teacher.id);\n    \n    return (\n      <Card \n        key={teacher.id} \n        className={`cursor-pointer transition-all hover:shadow-md ${\n          isSelected ? 'ring-2 ring-primary' : ''\n        }`}\n        onClick={() => handleTeacherToggle(teacher.id)}\n      >\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start gap-4\">\n            <Avatar className=\"w-16 h-16\">\n              <AvatarImage src={teacher.profilePhotoUrl} alt={teacher.fullName} />\n              <AvatarFallback>\n                {teacher.fullName.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"font-semibold text-lg truncate\">{teacher.fullName}</h3>\n                {isSelected && (\n                  <Heart className=\"w-5 h-5 text-primary fill-current\" />\n                )}\n              </div>\n              \n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  <span className=\"text-sm font-medium\">\n                    {teacher.ratings.averageRating.toFixed(1)}\n                  </span>\n                  <span className=\"text-xs text-muted-foreground\">\n                    ({teacher.ratings.totalReviews} reviews)\n                  </span>\n                </div>\n                <Separator orientation=\"vertical\" className=\"h-4\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  {teacher.experienceYears} years exp.\n                </span>\n              </div>\n              \n              <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                {teacher.bio}\n              </p>\n              \n              <div className=\"flex flex-wrap gap-1 mb-3\">\n                {teacher.specializations.slice(0, 3).map(spec => (\n                  <Badge key={spec} variant=\"secondary\" className=\"text-xs\">\n                    {spec}\n                  </Badge>\n                ))}\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>{teacher.availabilitySummary.availableThisWeek} slots</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span>${teacher.pricing.rate60Min}/hr</span>\n                  </div>\n                </div>\n                \n                <Button \n                  variant={isSelected ? \"default\" : \"outline\"} \n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleTeacherToggle(teacher.id);\n                  }}\n                >\n                  {isSelected ? 'Selected' : 'Select'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  /**\n   * Render filters panel\n   */\n  const renderFilters = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"search\">Search Teachers</Label>\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-3 w-4 h-4 text-muted-foreground\" />\n          <Input\n            id=\"search\"\n            placeholder=\"Search by name, specialization, or bio...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <Label>Sort By</Label>\n        <Select value={sortBy} onValueChange={(value) => setSortBy(value as SortOption)}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"rating\">Highest Rated</SelectItem>\n            <SelectItem value=\"experience\">Most Experienced</SelectItem>\n            <SelectItem value=\"availability\">Most Available</SelectItem>\n            <SelectItem value=\"price\">Lowest Price</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label>Experience Level</Label>\n        <Select \n          value={filters.experienceLevel} \n          onValueChange={(value) => handleFilterChange('experienceLevel', value)}\n        >\n          <SelectTrigger>\n            <SelectValue placeholder=\"Any experience level\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"\">Any experience level</SelectItem>\n            <SelectItem value=\"beginner\">Beginner (0-2 years)</SelectItem>\n            <SelectItem value=\"intermediate\">Intermediate (2-5 years)</SelectItem>\n            <SelectItem value=\"advanced\">Advanced (5-10 years)</SelectItem>\n            <SelectItem value=\"expert\">Expert (10+ years)</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label>Minimum Rating</Label>\n        <Select \n          value={filters.minRating.toString()} \n          onValueChange={(value) => handleFilterChange('minRating', parseFloat(value))}\n        >\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"0\">Any rating</SelectItem>\n            <SelectItem value=\"3\">3+ stars</SelectItem>\n            <SelectItem value=\"4\">4+ stars</SelectItem>\n            <SelectItem value=\"4.5\">4.5+ stars</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div>\n        <Label>Maximum Price (per hour)</Label>\n        <Select \n          value={filters.maxPrice.toString()} \n          onValueChange={(value) => handleFilterChange('maxPrice', parseInt(value))}\n        >\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"200\">Any price</SelectItem>\n            <SelectItem value=\"50\">Under $50</SelectItem>\n            <SelectItem value=\"75\">Under $75</SelectItem>\n            <SelectItem value=\"100\">Under $100</SelectItem>\n            <SelectItem value=\"150\">Under $150</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading teachers...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Choose Your Teacher</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Select up to 3 preferred teachers for the best matching\n          </p>\n        </div>\n        \n        <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as any)}>\n          <TabsList>\n            <TabsTrigger value=\"browse\">Browse All</TabsTrigger>\n            <TabsTrigger value=\"auto-match\">Auto Match</TabsTrigger>\n          </TabsList>\n        </Tabs>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Filters sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"w-4 h-4\" />\n                Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {renderFilters()}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Teachers grid */}\n        <div className=\"lg:col-span-3\">\n          <div className=\"mb-4 flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              {filteredTeachers.length} teachers available\n            </p>\n            \n            {selectedTeachers.length > 0 && (\n              <Badge variant=\"outline\">\n                {selectedTeachers.length} selected\n              </Badge>\n            )}\n          </div>\n\n          <div className=\"space-y-4 mb-6\">\n            {filteredTeachers.map(renderTeacherCard)}\n          </div>\n\n          {filteredTeachers.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No teachers found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Try adjusting your filters or search criteria\n              </p>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchQuery('');\n                  setFilters({\n                    experienceLevel: '',\n                    genderPreference: 'no_preference',\n                    minRating: 0,\n                    maxPrice: 200,\n                    specializations: [],\n                  });\n                }}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n\n          {/* Navigation buttons */}\n          <div className=\"flex justify-between\">\n            <Button variant=\"outline\" onClick={onBack}>\n              <ChevronLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            \n            <Button \n              onClick={handleSubmit}\n              disabled={selectedTeachers.length === 0}\n            >\n              Continue\n              <ChevronRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"