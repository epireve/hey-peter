version: '3.8'

services:
  # Prometheus - Metrics collection and alerting
  prometheus:
    image: prom/prometheus:latest
    container_name: heypeter-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - ./recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=50GB'
    restart: unless-stopped
    networks:
      - monitoring-network
      - app-network
    labels:
      - "service=prometheus"
      - "environment=production"

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: heypeter-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=heypeter-admin-2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_EMAIL=admin@heypeter-academy.com
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${EMAIL_SERVER_HOST}:${EMAIL_SERVER_PORT}
      - GF_SMTP_USER=${EMAIL_SERVER_USER}
      - GF_SMTP_PASSWORD=${EMAIL_SERVER_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=grafana@heypeter-academy.com
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=grafana"
      - "environment=production"

  # Alertmanager - Alert routing and notification
  alertmanager:
    image: prom/alertmanager:latest
    container_name: heypeter-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=alertmanager"
      - "environment=production"

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: heypeter-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=node-exporter"
      - "environment=production"

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: heypeter-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=cadvisor"
      - "environment=production"
    privileged: true

  # Postgres Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: heypeter-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${SUPABASE_DB_PASSWORD}@${SUPABASE_DB_HOST}:5432/postgres?sslmode=require
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=postgres-exporter"
      - "environment=production"

  # Redis Exporter - Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: heypeter-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - monitoring-network
      - app-network
    labels:
      - "service=redis-exporter"
      - "environment=production"

  # Nginx Exporter - Web server metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: heypeter-nginx-exporter
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx-lb:8080/nginx_status'
    restart: unless-stopped
    networks:
      - monitoring-network
      - app-network
    labels:
      - "service=nginx-exporter"
      - "environment=production"

  # Blackbox Exporter - External endpoint monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: heypeter-blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=blackbox-exporter"
      - "environment=production"

  # SSL Exporter - SSL certificate monitoring
  ssl-exporter:
    image: ribbybibby/ssl-exporter:latest
    container_name: heypeter-ssl-exporter
    ports:
      - "9219:9219"
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=ssl-exporter"
      - "environment=production"

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: heypeter-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=loki"
      - "environment=production"

  # Promtail - Log shipper
  promtail:
    image: grafana/promtail:latest
    container_name: heypeter-promtail
    volumes:
      - ./promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - monitoring-network
      - app-network
    labels:
      - "service=promtail"
      - "environment=production"

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: heypeter-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=jaeger"
      - "environment=production"

  # Uptime Kuma - Uptime monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: heypeter-uptime-kuma
    ports:
      - "3002:3001"
    volumes:
      - uptime-kuma-data:/app/data
    restart: unless-stopped
    networks:
      - monitoring-network
    labels:
      - "service=uptime-kuma"
      - "environment=production"

  # Custom Health Check Service
  health-checker:
    build:
      context: ./health-checker
      dockerfile: Dockerfile
    container_name: heypeter-health-checker
    ports:
      - "8888:8888"
    environment:
      - CHECK_INTERVAL=60
      - ALERT_WEBHOOK=${SLACK_WEBHOOK_URL}
      - EMAIL_CONFIG=${EMAIL_SERVER_HOST}:${EMAIL_SERVER_PORT}:${EMAIL_SERVER_USER}:${EMAIL_SERVER_PASSWORD}
    volumes:
      - ./health-checker/config.yml:/app/config.yml:ro
      - health-checker-logs:/app/logs
    restart: unless-stopped
    networks:
      - monitoring-network
      - app-network
    labels:
      - "service=health-checker"
      - "environment=production"

networks:
  monitoring-network:
    driver: bridge
  app-network:
    external: true

volumes:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  loki-data:
  uptime-kuma-data:
  health-checker-logs: