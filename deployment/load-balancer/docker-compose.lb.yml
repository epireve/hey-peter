version: '3.8'

services:
  # Load Balancer / Reverse Proxy
  nginx-lb:
    image: nginx:alpine
    container_name: heypeter-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../ssl:/etc/nginx/ssl:ro
      - ./nginx-cache:/var/cache/nginx
      - ./logs:/var/log/nginx
      - ./html:/var/www/html
      - ./letsencrypt:/var/www/letsencrypt
    depends_on:
      - app1
      - app2
      - app3
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    labels:
      - "service=nginx-lb"
      - "environment=production"

  # Application Server 1
  app1:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: heypeter-app1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=app1
    env_file:
      - ../environments/.env.production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    volumes:
      - app1-logs:/app/logs
      - shared-uploads:/app/uploads
    labels:
      - "service=app"
      - "instance=app1"
      - "environment=production"

  # Application Server 2
  app2:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: heypeter-app2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=app2
    env_file:
      - ../environments/.env.production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    volumes:
      - app2-logs:/app/logs
      - shared-uploads:/app/uploads
    labels:
      - "service=app"
      - "instance=app2"
      - "environment=production"

  # Application Server 3
  app3:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: heypeter-app3
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=app3
    env_file:
      - ../environments/.env.production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    volumes:
      - app3-logs:/app/logs
      - shared-uploads:/app/uploads
    labels:
      - "service=app"
      - "instance=app3"
      - "environment=production"

  # Backup Application Server
  app-backup:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: heypeter-app-backup
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_ID=app-backup
    env_file:
      - ../environments/.env.production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    volumes:
      - app-backup-logs:/app/logs
      - shared-uploads:/app/uploads
    labels:
      - "service=app"
      - "instance=backup"
      - "environment=production"
    # Scale down to 0 replicas by default (backup only)
    deploy:
      replicas: 0

  # Redis for Session Storage and Caching
  redis:
    image: redis:7-alpine
    container_name: heypeter-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    labels:
      - "service=redis"
      - "environment=production"

  # HAProxy for Advanced Load Balancing (Alternative/Additional)
  haproxy:
    image: haproxy:2.8-alpine
    container_name: heypeter-haproxy
    ports:
      - "8080:8080"  # Stats interface
      - "9000:9000"  # Alternative load balancer port
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./haproxy-logs:/var/log/haproxy
    depends_on:
      - app1
      - app2
      - app3
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "service=haproxy"
      - "environment=production"
    # Disabled by default - enable if needed
    profiles:
      - haproxy

  # Keepalived for High Availability (Optional)
  keepalived:
    image: osixia/keepalived:2.0.20
    container_name: heypeter-keepalived
    environment:
      - KEEPALIVED_INTERFACE=eth0
      - KEEPALIVED_VIRTUAL_IPS=192.168.1.100
      - KEEPALIVED_UNICAST_PEERS=192.168.1.101,192.168.1.102
      - KEEPALIVED_PASSWORD=heypeter-vrrp
    volumes:
      - ./keepalived.conf:/container/service/keepalived/assets/keepalived.conf
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
    restart: unless-stopped
    labels:
      - "service=keepalived"
      - "environment=production"
    # Disabled by default - enable for HA setup
    profiles:
      - ha

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  app1-logs:
  app2-logs:
  app3-logs:
  app-backup-logs:
  shared-uploads:
  redis-data:
  nginx-cache: