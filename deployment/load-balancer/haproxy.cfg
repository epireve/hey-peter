# HAProxy Configuration for HeyPeter Academy LMS
# Advanced Load Balancing and High Availability

global
    # Security and Performance
    daemon
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+SHA256:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Logging
    log stdout local0 info

    # Performance Tuning
    maxconn 4096
    nbproc 1
    nbthread 4

defaults
    # Mode and Options
    mode http
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    option httpclose
    option abortonclose

    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s

    # Retries and Connection Limits
    retries 3
    maxconn 2000

    # Health Check Defaults
    default-server init-addr last,libc,none

# Statistics Interface
stats uri /haproxy-stats
stats refresh 30s
stats realm HAProxy\ Statistics
stats auth admin:heypeter-admin-2025
stats hide-version

# Frontend - HTTP (Redirect to HTTPS)
frontend http_frontend
    bind *:80
    mode http
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend - HTTPS
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/heypeter-academy.pem
    mode http
    
    # Security Headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    
    # Request ID for tracing
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID
    
    # Rate Limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # ACLs for routing
    acl is_api path_beg /api/
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_static path_beg /_next/static/ /static/ /images/ /css/ /js/
    acl is_health path /health
    
    # Health check bypass
    use_backend health_backend if is_health
    
    # WebSocket routing
    use_backend websocket_backend if is_websocket
    
    # API routing with session persistence
    use_backend api_backend if is_api
    
    # Static content routing
    use_backend static_backend if is_static
    
    # Default application routing
    default_backend app_backend

# Backend - Health Check
backend health_backend
    mode http
    http-request return status 200 content-type "text/plain" string "healthy"

# Backend - Application Servers
backend app_backend
    mode http
    balance roundrobin
    
    # Health check
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Session persistence based on cookie
    cookie SERVERID insert indirect nocache
    
    # Compression
    compression algo gzip
    compression type text/html text/css text/javascript application/javascript application/json
    
    # Servers
    server app1 app1:3000 check cookie app1 weight 100 maxconn 500
    server app2 app2:3000 check cookie app2 weight 100 maxconn 500
    server app3 app3:3000 check cookie app3 weight 80 maxconn 400
    server app-backup app-backup:3000 check cookie backup weight 50 maxconn 200 backup

# Backend - API Servers with Session Affinity
backend api_backend
    mode http
    balance source  # IP hash for session affinity
    
    # Health check
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Rate limiting for API
    stick-table type ip size 10k expire 1m store http_req_rate(1m)
    http-request track-sc1 src
    http-request deny if { sc_http_req_rate(1) gt 60 }
    
    # API-specific headers
    http-request set-header X-Forwarded-Proto https
    http-request set-header X-Forwarded-Port 443
    
    # Servers
    server api1 app1:3000 check maxconn 200
    server api2 app2:3000 check maxconn 200
    server api3 app3:3000 check maxconn 150

# Backend - WebSocket
backend websocket_backend
    mode http
    balance source  # Source IP hash for WebSocket connections
    
    # WebSocket specific settings
    timeout server 1h
    timeout tunnel 1h
    
    # Health check
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost\r\nConnection:\ close
    
    # Servers
    server ws1 app1:3000 check maxconn 100
    server ws2 app2:3000 check maxconn 100
    server ws3 app3:3000 check maxconn 80

# Backend - Static Content
backend static_backend
    mode http
    balance roundrobin
    
    # Cache settings for static content
    http-request cache-use static_cache
    http-response cache-store static_cache
    
    # Compression for static files
    compression algo gzip
    compression type text/css text/javascript application/javascript image/svg+xml
    
    # Headers for static content
    http-response set-header Cache-Control "public, max-age=31536000"
    http-response set-header X-Content-Type-Options nosniff
    
    # Servers
    server static1 app1:3000 check maxconn 300
    server static2 app2:3000 check maxconn 300
    server static3 app3:3000 check maxconn 250

# Cache Configuration
cache static_cache
    total-max-size 256
    max-object-size 10240
    max-age 3600

# Admin Interface
frontend stats_frontend
    bind *:8080
    mode http
    
    # Basic authentication
    stats enable
    stats uri /
    stats refresh 30s
    stats realm HAProxy\ Admin
    stats auth admin:heypeter-stats-2025
    
    # Additional stats
    stats show-legends
    stats show-node
    stats admin if TRUE

# Monitoring and Alerting (Integration points)
frontend monitoring
    bind *:9090
    mode http
    
    # Prometheus metrics endpoint
    http-request use-service prometheus-exporter if { path /metrics }
    
    # Custom health endpoint with detailed status
    http-request return status 200 content-type "application/json" string "{\"status\":\"healthy\",\"timestamp\":\"$(date -Iseconds)\",\"version\":\"1.0.0\"}" if { path /health }

# SSL Certificate Management (for Let's Encrypt)
frontend letsencrypt
    bind *:80
    mode http
    
    # ACME challenge
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl
    
    # Redirect everything else to HTTPS
    redirect scheme https code 301 if !letsencrypt-acl

backend letsencrypt-backend
    mode http
    server letsencrypt 127.0.0.1:8888