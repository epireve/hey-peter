version: '3.8'

services:
  # Staging Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: heypeter-academy-staging
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: staging
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      DATABASE_URL: ${DATABASE_URL}
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      RATE_LIMIT_MAX: 100
      CACHE_TTL: 300
    volumes:
      - ./public:/app/public:ro
    networks:
      - heypeter-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache for Staging
  redis:
    image: redis:7-alpine
    container_name: heypeter-redis-staging
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - heypeter-redis-staging-data:/data
    networks:
      - heypeter-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: heypeter-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - heypeter-staging-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: heypeter-prometheus-staging
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - heypeter-prometheus-staging-data:/prometheus
    networks:
      - heypeter-staging-network
    restart: unless-stopped

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: heypeter-grafana-staging
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - heypeter-grafana-staging-data:/var/lib/grafana
    networks:
      - heypeter-staging-network
    restart: unless-stopped

volumes:
  heypeter-redis-staging-data:
  heypeter-prometheus-staging-data:
  heypeter-grafana-staging-data:

networks:
  heypeter-staging-network:
    driver: bridge
    name: heypeter-staging-network